#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# OANDA PlaceOrder - Forex markets

# Jackrabbit Relay
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

# Even though every framework can be tested in a single PlaceOrder process, its
# simply too overbloated and unneccessarily complicated. The server core already
# allows and perfers each exchange to have is own tailored PlaceOrder
# functionality. Each PlaceOrder should be optimized according to these benifits
# and should be considered time/mission critical.

import sys
sys.path.append('/home/JackrabbitRelay2/Base/Library')
import os
import json

import JRRsupport
import JackrabbitRelay as JRR

# Figure out the PCT type. Needs to identify %.

def GetPCTtype(currency):
    c=currency.lower().replace(' ','')
    vs=c.replace('%','').strip()
    PCTtype='B'
    pct=float(vs)
    return pct,PCTtype

def GetPCTvalue(pct,close,bal):
    volume=round(((pct/100)*bal),8)
    amount=round(volume/close,8)

    return amount,volume

def GetPCTamount(relay,close):
    fn=relay.DataDirectory+'/'+relay.Exchange+'.'+relay.Account+'.PCTtable'
    PCTtable=JRRsupport.TimedList("PCTtable",fn,Log=relay.JRLog)
    if relay.Order['Action']=='close':
        expire=0
    else:
        expire=(3650*86400)

    if "OverridePCTtable" not in relay.Active and "OverridePCTtable" not in relay.Order:
        bal=relay.GetBalance()
        pct,PCTtype=GetPCTtype(relay.Order['Units'])
        amount,volume=GetPCTvalue(pct,close,bal)

        pctData={}
        pctData['PCT']=pct
        pctData['Type']=PCTtype
        pctData['Volume']=volume
        pctData['Amount']=amount
        results=PCTtable.update(relay.Order['Asset'],json.dumps(pctData),expire)

        # This is needed sd results is a NESTED dictionary, with the outer layer
        # being from the timedList structure.

        payload=json.loads(results['Payload']['Payload'],strict=False)
        amount=payload['Amount']
    else:
        bal=relay.GetBalance()
        amount=round(((float(relay.Order[currency].replace('%',''))/100)*bal)/close,8)
    return amount

###
### Main code base. Place order on exchange
###

def main():
    relay=JRR.JackrabbitRelay(None,sys.stdin.read())

    # If we made it this far, give our header

    relay.JRLog.Write('PlaceOrder OANDA '+relay.Version)

    # Now lets get down to business. The processed order is in:
    #    relay.Order

    relay.JRLog.Write('Order parsed')
    for detail in relay.Order:
        # Do NOT display identity
        if detail=='Identity':
            continue
        relay.JRLog.Write(f'|- {detail}: {relay.Order[detail]}')

    # Check to see if we need to remap a tradingview symbol to The Exchange
    # symbol. Remapping must take place before market verification.

    if "RemapSymbol" in relay.Active or "RemapSymbol" in relay.Order:
        relay.TradingViewRemap()

    # Verify market

    # This may become a problem in the future as exchanges begin to ignore
    # market type or provide incomplete/wrong information. One possible way of
    # dealing with this is to add an overide that ignores market type
    # verification. This issue only exists in the cryptocurrency markets.

    if relay.Order['Asset'] not in relay.Markets:
        relay.JRLog.Error(relay.Exchange, f"{relay.Order['Asset']}: Not a valid asset on this exchange")

    # Check for order type override

    if "OrderTypeOverride" in relay.Active:
        relay.Order['OrderType']=relay.Active['OrderTypeOverride'].lower()

    ticker=relay.GetTicker(symbol=relay.Order['Asset'])

    # Check the spreads

    if 'Spread' in relay.Order:
        if ticker['Spread']>=float(relay.Order['Spread']):
            s=f"too large, {spread:.8f} > {relay.Active['Spread']:.8f}"
            relay.JRLog.Error("Spread", s)

    # Check for maximum allowed assets

    if not "OverrideMaxAssets" in relay.Order:
        if "MaxAssets" in relay.Active:
            fn=relay.DataDirectory+'/'+relay.Exchange+'.'+relay.Account+'.MaxAssets'
            maxAssetsList=JRRsupport.TimedList("MaxAssets",fn,maxsize=int(relay.Active['MaxAssets']),Log=relay.JRLog)
            if relay.Order['Action']=='close':
                expire=0
            else:
                expire=(7*86400)
            results=maxAssetsList.update(relay.Order['Asset'],json.dumps(relay.Order),expire)
            if results['Status']=='ErrorLimit' and relay.Order['Action']=='buy':
                relay.JRLog.Error("MaxAssets","maximum limit exceeded")

    # Check for reduce only in active config. This is a futures only setting.

    ReduceOnly=False
    if "ReduceOnly" in relay.Active:
        ReduceOnly=True

    # Get Minimum allowed amount (units) and cost

    isMinimum=False
    minimum,mincost=relay.GetMinimum(symbol=relay.Order['Asset'])

    # No amount method so using exchange minimum
    if 'Units' not in relay.Order:
        isMinimum=True
        amount=minimum
        price=mincost
        relay.JRLog.Write('Using minimum position amount/price')
        relay.JRLog.Write(f'|- Minimum Amount: {minimum:.8f}')
        relay.JRLog.Write(f'|- Minimum Cost:   {mincost:.8f}')
    else:
        price=ticker['Ask']
        if '%' in relay.Order['Units']:
            amount=int(GetPCTamount(relay,price))
        else:
            amount=int(relay.Order['Units'])

        # Make sure minimum is enforced. Negative is for short.

        if abs(amount)<minimum:
            if amount>=0:
                amount=minimum
            else:
                amount=-minimum

    # Figure limit order pricing, minimum cost is ignored as limit orders can be
    # anything.

    if 'limit' in relay.Order['OrderType']:
        if 'Price' in relay.Order:
            o=relay.Order['Price'].lower()
            if o=='bid':
                price=round(float(ticker['Bid']),8)
            elif o=='ask':
                price=round(float(ticker['Ask']),8)
            else:
                price=round(float(relay.Order['Price']),8)
        else:
            price=round(ticker['Ask'],8)

    # Get Previous Balance. Shorts will be negative

    base=relay.Order['Asset'].split('/')[0]
    pBalance=relay.GetPositions(symbol=relay.Order['Asset'])
    units=relay.Broker.Results['Units']
    relay.JRLog.Write(f"Previous Balance: {abs(pBalance):.8f} {base}")

    # If the amount is less then the minimum and action is to close. Sell opens
    # a short position.

    if abs(pBalance)<mincost and relay.Order['Action']=='close':
        relay.JRLog.Error(relay.Exchange, "not enough to sell/close position")

    # Closing the position, with futures, we need to figure out the current direction and
    # place an order opposite to it. If not ReduceOnly, all position flipping.

    if relay.Order['Action']=='close':
        relay.Order['Action']='sell'
        amount='ALL'
    elif relay.Order['Action']=='sell' and ReduceOnly==True:
        if pBalance>0:    # Long Position
            relay.Order['Action']='sell'
            relay.JRLog.Write(f"Forcing direction to {relay.Order['Action']}")
            amount=int(pBalance/price)
        elif pBalance<0:  # Short Position
            relay.Order['Action']='buy'
            relay.JRLog.Write(f"Forcing direction to {relay.Order['Action']}")
            amount=int(pBalance/price)
    elif relay.Order['Action']=='sell' \
     and ((amount<0 and amount<units) or (amount>0 and amount>units)):
        # Make ure units is in range of what we actually hold
        amount=units

    # Determine trade action and carry it out

    if type(amount)==int:
        total=abs(round(amount*price,8))
    else:
        total=abs(pBalance)
    if (type(amount)==str and amount.upper()=='ALL' and pBalance>=0) \
    or (type(amount)==int and amount>=0):
        dir='Long'
    elif (type(amount)==str and amount.upper()=='ALL' and pBalance<0) \
    or (type(amount)==int and amount<0):
        dir='Short'

    relay.JRLog.Write("Placing Order")
    relay.JRLog.Write(f"|- Asset: {relay.Order['Asset']}")
    relay.JRLog.Write(f"|- Action: {relay.Order['Action']}")
    if type(amount)==int:
        relay.JRLog.Write(f"|- Units: {abs(amount):.8f} {dir}")
    else:
        relay.JRLog.Write(f"|- Units: {amount} {dir}")
    relay.JRLog.Write(f"|- Price: {price:.8f}")
    relay.JRLog.Write(f"|- Total: {total:.8f}")

    if (type(amount)==int and amount!=0) \
    or (type(amount)==str and amount.upper()=='ALL'):
        lNote=None
        if 'LedgerNote' in relay.Order:
            lNote=relay.Order['LedgerNote']

        # Make sure short close is clearly marked negative for ALL
        if pBalance<0 and type(amount)==str and amount.upper()=='ALL':
            amount='-ALL'

        order=relay.PlaceOrder(pair=relay.Order['Asset'], \
            orderType=relay.Order['OrderType'], \
            action=relay.Order['Action'], \
            amount=amount, \
            price=price, \
            ReduceOnly=False, \
            LedgerNote=lNote)

        nBalance=relay.GetPositions(symbol=relay.Order['Asset'])
        relay.JRLog.Write(f"New Balance: {abs(nBalance):.8f} {base}")

        if "Orphan" in relay.Active or "Orphan" in relay.Order \
        and 'limit' in relay.Order['OrderType']:
            relay.MakeOrphanOrder(order['id'],relay.Order)
        elif 'market' in relay.Order['OrderType']:
            relay.WriteLedger(Order=relay.Order,Response=order)
    else: # logic fault, should never happen
        relay.JRLog.Error(relay.Exchange, "can not buy/sell nothing")

    # Close out the program with the elapsed time it ran

    relay.JRLog.Elapsed()

if __name__ == '__main__':
    main()
