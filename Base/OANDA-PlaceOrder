#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# OANDA PlaceOrder

# Jackrabbit Relay
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

# Even though every framework can be tested in a single PlaceOrder process, its
# simply too overbloated and unneccessarily complicated. The server core already
# allows and perfers each exchange to have is own tailored PlaceOrder
# functionality. Each PlaceOrder should be optimized according to these benifits
# and should be considered time/mission critical.

import sys
sys.path.append('/home/JackrabbitRelay2/Base/Library')
import os

import JackrabbitRelay as JRR

###
### Main code base. Place order on exchange
###

def main():
    relay=JRR.JackrabbitRelay(None,sys.stdin.read())

    # If we made it this far, give our header

    relay.JRLog.Write('PlaceOrder '+relay.Version)

    # Now lets get down to business. The processed order is in:
    #    relay.Order

    relay.JRLog.Write('Order parsed')
    for detail in relay.Order:
        # Do NOT display identity
        if detail=='Identity':
            continue
        relay.JRLog.Write(f'|- {detail}: {relay.Order[detail]}')

    # Check for order type override

    if "OrderTypeOverride" in relay.Active:
        relay.Order['OrderType']=relay.Active['OrderTypeOverride'].lower()

    # Check to see if we need to remap a tradingview symbol to The Exchange symbol

    if "RemapSymbol" in relay.Active or "RemapSymbol" in relay.Order:
        relay.TradingViewRemap()

    ticker=relay.GetTicker(symbol=relay.Order['Asset'])

    # Check the spreads

    if 'SpreadOverride' in relay.Active:
        if ticker['Spread']>float(relay.Active['SpreadOverride']):
            s=f"too large, {spread:.8f} > {relay.Active['SpreadOverride']:.8f}"
            relay.JRLog.Error("Spread", s)
    if 'Spread' in relay.Order:
        if ticker['Spread']>float(relay.Order['Spread']):
            s=f"too large, {spread:.8f} > {relay.Active['SpreadOverride']:.8f}"
            relay.JRLog.Error("Spread", s)

    # Get Minimum allowed amount (units) and cost

    isMinimum=False
    minimum,mincost=relay.GetMinimum(symbol=relay.Order['Asset'])

    # Needs to be conditionally displayed.

    relay.JRLog.Write('Required minimums:')
    relay.JRLog.Write(f'|- Minimum Amount: {minimum:.8f}')
    relay.JRLog.Write(f'|- Minimum Cost:   {mincost:.8f}')

    # Get and report previous balance of an asset.

    pBalace=relay.GetPositions(symbol=relay.Order['Asset'])
    relay.JRLog.Write(f"Previous Balance: {bal:.8f} {base}")


    # Figure limit order pricing, minimum cost is ignored as limit orders can be
    # anything.

    if 'limit' in relay.Order['OrderType']:
        if 'Price' in relay.Order:
            o=relay.Order['Price'].lower()
            if o=='bid':
                limitPrice=round(float(ticker['Bid']),8)
            elif o=='ask':
                limitPrice=round(float(ticker['Ask']),8)
            else:
                limitPrice=round(float(relay.Order['Close']),8)
        else:
            limitPrice=round(ticker['Ask'],8)
    else:
        limitPrice=round(ticker['Ask'],8)








    # Close out the program with the elapsed time it ran

    relay.JRLog.Elapsed()

if __name__ == '__main__':
    main()









"""


# Check for maximum allowed assets

    if not "OverrideMaxAssets" in Order:
        if "MaxAssets" in Active:
            delete=(action=='close')
            JRRsupport.ReadAssetList(exchangeName,account,pair,Active['MaxAssets'],delete)

# Market Check, questionable for future usage requirements

    marketType="spot"
    if "type" in ticker['info']:
        marketType=ticker['info']['type'].lower()
    else:
        if "type" in exchange.markets[pair]:
            if "type" in exchange.markets[pair]['info']:
                if exchange.markets[pair]['info']['type']==exchange.markets[pair]['type']:
                    marketType=exchange.markets[pair]['type'].lower()
                else:
                    marketType=exchange.markets[pair]['info']['type'].lower()
        else:
            if "permissions" in exchange.markets[pair]['info']:
                marketType=' '.join(exchange.markets[pair]['info']['permissions']).lower()

    if market not in marketType:
        relay.JRLog.Error(exchangeName, "wrong market type: "+market+', asset is '+marketType)


    # Figure out percentages

    if not isMinimum:
        if hasUSD:
            if '%' in Order['USD']:
                delete=(action=='close')
                if "OverridePCTtable" not in Active and "OverridePCTtable" not in Order:
                    pct,PCTtype=JRRsupport.GetPCTtype(Order['USD'])
                    amount=JRRsupport.ReadPCTValueList(exchange,account,pair,pct,PCTtype,close,delete,RetryLimit)
                else:
                    bal=JRRapi.GetBalance(exchange,quote,RetryLimit)
                    amount=round(((float(Order['USD'].replace('%',''))/100)*bal)/close,8)
            else:
                amount=round(float(Order['USD'])/close,8)
        else:
            if hasQuote:
                if '%' in Order['Quote']:
                    delete=(action=='close')
                    if "OverridePCTtable" not in Active and "OverridePCTtable" not in Order:
                        pct,PCTtype=JRRsupport.GetPCTtype(Order['Quote'])
                        amount=JRRsupport.ReadPCTValueList(exchange,account,pair,pct,PCTtype,close,delete,RetryLimit)
                    else:
                        bal=JRRapi.GetBalance(exchange,quote,RetryLimit)
                        amount=round(((float(Order['Quote'].replace('%',''))/100)*bal)/close,8)
                else:
                    amount=round(float(Order['Quote'])/close,8)
            else:
                if '%' in Order['Base']:
                    delete=(action=='close')
                    if "OverridePCTtable" not in Active and "OverridePCTtable" not in Order:
                        pct,PCTtype=JRRsupport.GetPCTtype(Order['Base'])
                        amount=JRRsupport.ReadPCTValueList(exchange,account,pair,pct,PCTtype,close,delete,RetryLimit)
                    else:
                        bal=JRRapi.GetBalance(exchange,quote,RetryLimit)
                        amount=round(((float(Order['Base'].replace('%',''))/100)*bal)/close,8)
                else:
                    amount=round(float(Order['Base']),8)

        # Make sure minimum is enforced.
        # KuCoin sub accounts do NOT verify or report correctly on this.
        if amount<minimum:
            amount=minimum











# If the amount is less then the minimum and action is to sell/close

    if bal<minimum and (action=='close' or action=='sell'):
        relay.JRLog.Error(exchangeName, "not enough to sell/close position")

# Test to see if amount is more than balance and correct in needed

    if ((action=='close' or action=='sell') and (amount>bal and bal>0)) or (action=='close'):
        relay.JRLog.Write("|- Forcing balance")
        amount=bal

# Time to make a purchase

    if amount<minimum and action=='buy':
        relay.JRLog.Write("|- Forcing minimum")
        amount=minimum

# Determine trade action and carry it out

    price=round(amount*close,8)
    relay.JRLog.Write("Placing Order")
    relay.JRLog.Write("|- Pair: "+pair)
    relay.JRLog.Write("|- Action: "+action)
    relay.JRLog.Write("|- Amount: "+f'{amount:.8f}')
    relay.JRLog.Write("|- Close: "+f'{close:.8f}')
    relay.JRLog.Write("|- Price: "+f'{price:.8f}')

    try: # Isolated or Crossed
        if "set_margin_mode" in exchange and "Margin" in Order:
            exchange.set_margin_mode(pair,Order['Margin'].upper())
            relay.JRLog.Write("|- Margin: "+Order['Margin'])
    except:
        pass

    try:
        if "Reduction" in Active and action!="buy" and amount>=bal:
            pct=Active['Reduction']
            r=(amount*pct)
            relay.JRLog.Write("|- Reduction: "+str(r))
            amount=amount-r
    except:
        pass

    if action=='close':
        action='sell'

# In spot markets, ReduceOnly is ALWAYS false

    if amount>0.0:
        JRRapi.PlaceOrder(exchange,account,pair, orderType, action, amount, close, RetryLimit, False, ledgerNote)

        bal=JRRapi.GetBalance(exchange,base,RetryLimit)
        sbal=f"{float(bal):.8f}"
        relay.JRLog.Write("New Balance: "+sbal+" "+base)

# Finish with elapsed time

    JRRlog.ElapsedTime(JRRconfig.StartTime)
"""
