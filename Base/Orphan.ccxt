#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit Relay
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

import sys
sys.path.append('/home/GitHub/JackrabbitRelay/Base/Library')
import os
import json
import time

import JRRsupport
import JackrabbitRelay as JRR

def main():
    data=sys.stdin.read().strip()
    try:
        Orphan=json.loads(data,strict=False)
    except:
        # Emergency falthru to prevent damage to the orphan list.
        rData={}
        rData['Key']='Corrupted'
        rData['lID']='Corrupted'
        rData['mID']='Corrupted'
        rData['Status']='open'
        print(json.dumps(rData))
        sys.stdout.flush()
        sys.exit(0)

    # Use Relay to process and validate the order. Order MUST be a JSON string.

    if type(Orphan['Order']) is dict:
        order=json.dumps(Orphan['Order'])
    else:
        order=Orphan['Order']

    relay=JRR.JackrabbitRelay(framework=Orphan['Framework'],payload=order)
    relay.JRLog.SetBaseName('OliverTwist')

    # Check to see if order is still open and return current state
    id=Orphan['ID']

    openOrders=relay.GetOpenOrders(symbol=relay.Order['Asset'])
    #relay.JRLog.Write(f"Orders: {len(openOrders)}",stdOut=False)
    for cur in openOrders:
        if cur['id']==id:
            rData={}
            rData['Key']=Orphan['Key']
            rData['lID']=Orphan['lID']
            rData['mID']=Orphan['mID']
            rData['Status']=cur['status']
            print(json.dumps(rData))
            sys.stdout.flush()
            #relay.JRLog.Write(f"{id}: {cur['status']}",stdOut=False)
            sys.exit(0)

    # Order must be closed
    rData={}
    rData['Key']=Orphan['Key']
    rData['lID']=Orphan['lID']
    rData['mID']=Orphan['mID']
    rData['Status']='Delete'
    print(json.dumps(rData))
    sys.stdout.flush()
    relay.WriteLedger(Order=Orphan,Response=None,Log=True)

if __name__ == '__main__':
    main()
