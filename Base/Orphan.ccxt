#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit Relay
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

import sys
sys.path.append('/home/GitHub/JackrabbitRelay/Base/Library')
import os
import json
import time

import JRRsupport
import JackrabbitRelay as JRR

# Timeout before Locker auto-deletes this order result

OliverTwistTimeout=(15*60)

# Write the result to Locker memory so parent knows we are finished.

def FinishOrphan(Key,lID,mID,State):
    # Get the lock read and set up the memory key. Locker doesn't care and which class this order belongs to. OliverTwist will
    # match the ID to the right class list, orphan or conditional.

    OliverTwistLock=JRRsupport.Locker("OliverTwist",ID=lID)
    Memory=JRRsupport.Locker(Key,ID=mID)

    OliverTwistLock.Lock()

    State=State.lower()

    if State!='delete':
        # Return this order to a waiting state
        Memory.Put(OliverTwistTimeout*100,"Waiting")
    elif State=='delete':
        # This order has been processed and needs to be removed from the system.
        Memory.Put(OliverTwistTimeout*100,"Delete")

    OliverTwistLock.Unlock()

    # We're done. This child has completed its task
    sys.exit(0)

###
### Main driver
###

def main():
    data=sys.stdin.read().strip()
    try:
        Orphan=json.loads(data,strict=False)
    except:
        FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],'open')

    # Use Relay to process and validate the order. Order MUST be a JSON string.

    if type(Orphan['Order']) is dict:
        order=json.dumps(Orphan['Order'])
    else:
        order=Orphan['Order']

    relay=JRR.JackrabbitRelay(framework=Orphan['Framework'],payload=order,NoIdentityVerification=True)
    relay.JRLog.SetBaseName('OliverTwist')

    # Check to see if order is still open and return current state
    id=Orphan['ID']
    openOrders=relay.GetOpenOrders(symbol=relay.Order['Asset'])
    #relay.JRLog.Write(f"Orders: {len(openOrders)}",stdOut=False)
    for cur in openOrders:
        if cur['id']==id:
            FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],cur['state'])

    # Order must be closed
    relay.WriteLedger(Order=Orphan,Response=None)
    FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],'Delete')

if __name__ == '__main__':
    main()
