#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
from socketserver import ForkingMixIn
from http.server import HTTPServer, BaseHTTPRequestHandler
from datetime import datetime
import subprocess
import json
import time

LogDirectory="/home/JackrabbitRelay/Logs"
BaseDirectory='/home/JackrabbitRelay/Base'

# Write log entry

def WriteLog(addr,msg):
    time=(datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f'))

    s=f'{time} {addr:16} {msg}\n'

    fh=open(LogDirectory+'/JackrabbitRelay.log','a')
    fh.write(s)
    fh.close()

# Process the trade and send it to the correct transactor

def ProcessTrade(addr,payload):
    res=""
    exchange=None
    ts=BaseDirectory+'/PlaceOrder.'

    # This is where we need to break down the payload to see if it is a single JSON
    # or multiple JSON messages

    trades=json.loads(payload,strict=False)

    if type(trades)==dict:
        # identify Exchange for PlaceOrder transactor

        if "Exchange" in trades:
            exchange=trades['Exchange']
            fn=ts+exchange
            if os.path.exists(fn):
                transactor= [ fn ]
                subp=subprocess.Popen(transactor,stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
                data=json.dumps(trades)

                subp.stdin.write(data.encode())
                res=subp.communicate()[0]
                code=subp.poll()
                if code>0:
                    WriteLog(addr,"Transactor return code: "+str(code))
            else:
                WriteLog(addr,"Transactor not found for "+exchange)
        else:
            WriteLog(addr,"Exchange not listed in payload")

    else:
        for trade in trades:
            # identify Exchange for PlaceOrder transactor

            if "Exchange" in trade:
                exchange=trade['Exchange']
                fn=ts+exchange
                if os.path.exists(fn):
                    transactor= [ fn ]
                    subp=subprocess.Popen(transactor,stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
                    data=json.dumps(trade)

                    subp.stdin.write(str(data).encode())
                    res=res+subp.communicate()[0]+"\n\n"
                    code=subp.poll()
                    if code>0:
                        WriteLog(addr,"Transactor return code: "+str(code))
                else:
                    WriteLog(addr,"Transactor not found for "+exchange)
            else:
                WriteLog(addr,"Exchange not listed in payload")
    return res

class Handler(BaseHTTPRequestHandler):

    def log_message(self,format,*args):
        addr=self.client_address[0]
        time=(datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f'))

        s=f'{time} {addr:16} {args}\n'

        fh=open(LogDirectory+'/JackrabbitRelay.log','a')
        fh.write(s)
        fh.close()

    def do_POST(self):
        # Send the client a success reponse
        addr=self.client_address[0]
        self.send_response(200)
        self.end_headers()
        self.wfile.write(bytes('\r\n'.encode()))

        # Get the length of the post data
        content_len = int(self.headers.get_all('content-length', 0)[0])

        # Read the post data

        payload = self.rfile.read(content_len)

        # Process Payload

        res=ProcessTrade(addr,payload)

        if res!=None:
            self.wfile.write(res)
        return

class ForkingSimpleServer(ForkingMixIn, HTTPServer):
    pass

def main():
    if len(sys.argv) > 1:
        port = int(sys.argv[1])
    else:
        print("Port number not given, exiting...")
        sys.exit(2)

    server = ForkingSimpleServer(('', port), Handler)
    addr, port = server.server_address

    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("Terminated")

if __name__ == '__main__':
    main()


