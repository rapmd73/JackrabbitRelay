#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# OANDA Conditional Orders - OliverTwist

# Jackrabbit Relay
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

# This is the framework used by OliverTwist to process conditional orders.

# Pull the actual fill price from open trades

# SellAction of Close sets Units to all and closes the entire position. Sell uses the Oanda ticket system.

import sys
sys.path.append('/home/GitHub/JackrabbitRelay/Base/Library')
import os
import json
import datetime
import time

import JRRsupport
import JackrabbitRelay as JRR

import traceback

# Timeout before Locker auto-deletes this order result

OliverTwistTimeout=(15*60)

# Write the result to Locker memory so parent knows we are finished.

def FinishOrphan(Key,lID,mID,State):
    # Get the lock read and set up the memory key. Locker doesn't care and which class this order belongs to. OliverTwist will
    # match the ID to the right class list, orphan or conditional.

    OliverTwistLock=JRRsupport.Locker("OliverTwist",ID=lID)
    Memory=JRRsupport.Locker(Key,ID=mID)

    OliverTwistLock.Lock()

    State=State.lower()

    if State!='delete':
        # Return this order to a waiting state
        Memory.Put(OliverTwistTimeout*100,"Waiting")
    elif State=='delete':
        # This order has been processed and needs to be removed from the system.
        Memory.Put(OliverTwistTimeout*100,"Delete")

    OliverTwistLock.Unlock()

    # We're done. This child has completed its task
    sys.exit(0)

# Get the order ID. If there isn't an ID, the order FAILED.

def GetOrderID(res):
    if res==None:
        return None

    try:
        if res.find('Order Confirmation ID')>-1:
            s=res.find('ID:')+4
            for e in range(s,len(res)):
                if res[e]=='\n':
                    break
            oid=res[s:e]

            return oid
    except:
        pass
    return None

# Calculate Price

def CalculatePriceExit(order,ts,dir,price,onePip):
    # Figure out TakeProfit or Stoploss
    if ts=='TakeProfit':
        if '%' in order[ts]:
            if dir=='long':
                val=price+((float(order[ts].replace('%','').strip())/100)*price)
            else:
                val=price-((float(order[ts].replace('%','').strip())/100)*price)
        # Pips
        elif 'p' in order[ts].lower():
            if dir=='long':
                val=price+(float(order[ts].lower().replace('p','').strip())*onePip)
            else:
                val=price-(float(order[ts].lower().replace('p','').strip())*onePip)
        else:
            val=float(order[ts])
    elif ts=='StopLoss':
        if '%' in order[ts]:
            if dir=='long':
                val=price-((float(order[ts].replace('%','').strip())/100)*price)
            else:
                val=price+((float(order[ts].replace('%','').strip())/100)*price)
        # Pips
        elif 'p' in order[ts].lower():
            if dir=='long':
                val=price-(float(order[ts].lower().replace('p','').strip())*onePip)
            else:
                val=price+(float(order[ts].lower().replace('p','').strip())*onePip)
        else:
            val=float(order[ts])

    return val

# Find the lowest unit size and reduce it by value amount.

# We can't just use the oldest because of FIFO, so we must reduce the one withthe least number of units. We could find the
# oldest, thn te lowest and reduce that way, but there is a hgh risk the reduction won't be the exact amount we want to
# reduce by. The goal of this is to shave off losses with each full winning trade, so predictability is absolutely
# critical to ensure micro losses are always minimal. This is a strategic approach to constantly reduce margin while still
# profiting as a whole.

def ReduceLotSize(relay,pair,val):
    openTrades=relay.GetOpenTrades(symbol=pair)

    if openTrades==[]:
        return

    # Find ticket ID wth lowest number of uits.

    lowestTrade=None
    lowestSize=9999999
    for trade in openTrades:
        units=abs(int(trade['currentUnits']))
        if abs(units)<lowestSize:
            lowestSize=units
            lowestTrade=trade

    # Fail safe check

    if lowestTrade==None:
        return

    lossID=lowestTrade['id']
    lossIU=float(lowestTrade['currentUnits'])
    price=float(lowestTrade['price'])

    # Get the direction of the reduction trade right.

    if lossIU<0:
        runits=val
        Dir='short'
        Action='Buy'
    else:
        runits=val*-1
        Dir='long'
        Action='Sell'

#    result=SendOrder(Action=Action,Ticket=lossID,Units=runits)
    newOrder={}
    newOrder['OliverTwist']='Conditional ReduceBy'
    newOrder['Exchange']=relay.Order['Exchange']
    newOrder['Account']=relay.Order['Account']
    newOrder['Asset']=relay.Order['Asset']
    newOrder['Action']=Action.lower()
    if 'EnforceFIFO' in relay.Order:
        newOrder['EnforceFIFO']=relay.Order['EnforceFIFO']
    newOrder['Units']=runits
    newOrder['Ticket']=str(lossID)
    if 'OrderType' in relay.Order:
        newOrder['OrderType']=relay.Order['OrderType']
    else:
        newOrder['OrderType']='market'
    newOrder['Identity']=relay.Active['Identity']

    # Feed the new order to Relay
    result=relay.SendWebhook(newOrder)
    oid=GetOrderID(result)
    if oid!=None:
        orderDetail=relay.GetOrderDetails(OrderID=oid)

        sprice=float(orderDetail[-1]['price'])
        rpl=float(orderDetail[-1]['pl'])
        relay.JRLog.Write(f"{lossID} -> {oid} ReduceBy {Dir}, {val}: {price:.5f} -> {sprice:5f}/{rpl:.5f}")

###
### Main driver
###

def main():
    data=sys.stdin.read().strip()
    Orphan=json.loads(data)

    # Use Relay to process and validate the order
    if type(Orphan['Order']) is dict:
        order=json.dumps(Orphan['Order'])
    else:
        order=Orphan['Order']

    relay=JRR.JackrabbitRelay(framework=Orphan['Framework'],payload=order,NoIdentityVerification=True)
    relay.JRLog.SetBaseName('OliverTwist')
    LogMSG=None

    # Check is "paused" marker is found
#    paused='OlivwerTwwist.'+relay.Exchange+'.'+relay.Account+'.Paused'
#    if os.path.exists(paused):
#        FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],Orphan['Status'])

    try:
        # Check to see if order is still open and return current state
        # Handle OANDa's weird order id sequencing
        id=Orphan['ID']
        orderDetail=relay.GetOrderDetails(OrderID=Orphan['ID'])
        cid=orderDetail[-1]['id']
        saction=relay.Order['SellAction'].lower()

        # Get the direction of the trade, long/short
        dir=relay.Order['Direction'].lower()

        # Used to determin if the asset/poition has been found
        foundPrice=False

        # Manage average and close extire position
        if saction=='close':
            positions=relay.GetPositions()
            if positions!=None:
                for pos in positions:
                    if pos['instrument'].replace('_','/')==relay.Order['Asset']:
                        foundPrice=True
                        price=float(pos[dir]['averagePrice'])
                        units=abs(float(pos[dir]['units']))
                        break
        else:
            # Manage a single ticket
            openTrades=relay.GetOpenTrades(symbol=relay.Order['Asset'])
            # no open trades
            if openTrades==[]:
                # Fall through. No order matching the ID.
                FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],'Delete')

            for cur in openTrades:
                if cur['id']==cid:
                    # Get the fill price from the response entry
                    foundPrice=True
                    price=float(cur['price'])
                    units=abs(float(cur['currentUnits']))
                    break

        # Process the position
        if foundPrice==True:
            # We need to check TakeProfit and StopLoss. If one of them is hit, we need to build and order and backfeed it in
            # to Relay. It will place a new order.

            # Get Ticker
            ticker=relay.GetTicker(symbol=relay.Order['Asset'])

            # Check the spreads. It is possible that a fast moving market will pass this test, then drastically increase by
            # the time the position is closed.

            if 'Spread' in relay.Active:
                if ticker['Spread']>=float(relay.Active['Spread']):
                    s=f"excessivew spread, {relay.Order['SellAction'].lower()} delayed, {ticker['Spread']:.5f} > {relay.Active['Spread']:.5f}"
                    relay.JRLog.Write(f"{id} -> {cid}: {relay.Asset}/{units} {dir} {s}",stdOut=False)
                    FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],Orphan['Status'])

            if 'Spread' in relay.Order:
                if ticker['Spread']>=float(relay.Order['Spread']):
                    s=f"excessivew spread, {relay.Order['SellAction'].lower()} delayed, {ticker['Spread']:.5f} > {relay.Order['Spread']:.5f}"
                    relay.JRLog.Write(f"{id} -> {cid}: {relay.Asset}/{units} {dir} {s}",stdOut=False)
                    FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],Orphan['Status'])

            # Fsilsafe, in the WORST way possible. Do NOT leave a take profit out of the order. At this stage, the whole thing is
            # an absolute nightmare to fix. The is a very brutal way of dealing with poor user choices.
            if 'TakeProfit' not in relay.Order:
                relay.Order['TakeProfit']='10p'
            # Calculate Take Profit
            tp=round(CalculatePriceExit(relay.Order,'TakeProfit',dir,price,relay.Broker.onePip),5)

            # Figure out StopLoss, if there is one
            if 'StopLoss' in relay.Order:
                sl=round(CalculatePriceExit(relay.Order,'StopLoss',dir,price,relay.Broker.onePip),5)

            # find trade open time
            parts=orderDetail[0]['time'].split('.')
            dsS=f"{parts[0]}.{parts[1][:6]}Z"
            ds=datetime.datetime.strptime(dsS,'%Y-%m-%dT%H:%M:%S.%fZ')

            # Get the "strikePrice". This handles both TakeProfit and StopLoss. It doesn't matter which as both are processed
            # the same way.

            StrikeHappened=False
            if dir=='long':
                if 'Diagnostics' in relay.Active:
                    relay.JRLog.Write(f"{id} -> {cid}: {relay.Asset}/{units} {dir} Price: {price}, Bid: {ticker['Bid']} TP: {tp}/{relay.Order['TakeProfit']}, SL {sl}/{relay.Order['StopLoss']}",stdOut=False)

                if ticker['Bid']>(tp+ticker['Spread']) or ('StopLoss' in relay.Order and ticker['Bid']<(sl-ticker['Spread'])):
                    strikePrice=ticker['Bid']
                    StrikeHappened=True
            else:
                if 'Diagnostics' in relay.Active:
                    relay.JRLog.Write(f"{id} -> {cid}: {relay.Asset}/{abs(units)} {dir} Price: {price}, Ask: {ticker['Ask']} TP: {tp}/{relay.Order['TakeProfit']}, SL {sl}/{relay.Order['StopLoss']}",stdOut=False)

                if ticker['Ask']<(tp-ticker['Spread']) or ('StopLoss' in relay.Order and ticker['Ask']>(sl+ticker['Spread'])):
                    strikePrice=ticker['Ask']
                    StrikeHappened=True

            if StrikeHappened==True:
                # Build "strike" order. TakeProfit or StopLoss has been triggered
                newOrder={}
                newOrder['OliverTwist']='Conditional'
                newOrder['Exchange']=relay.Order['Exchange']
                newOrder['Account']=relay.Order['Account']
                newOrder['Asset']=relay.Order['Asset']
                newOrder['Action']=relay.Order['SellAction'].lower()
                if 'EnforceFIFO' in relay.Order:
                    newOrder['EnforceFIFO']=relay.Order['EnforceFIFO']
                newOrder['Price']=str(strikePrice)
                if saction=='close':
                    # Set trade polarity
                    if dir=='long':
                        newOrder['Units']='ALL'
                    else:
                        newOrder['Units']='-ALL'
                else:
                    newOrder['Units']=relay.Order['Units']
                    newOrder['Ticket']=str(cid)
                if 'OrderType' in relay.Order:
                    newOrder['OrderType']=relay.Order['OrderType']
                else:
                    newOrder['OrderType']='market'

                newOrder['Identity']=relay.Active['Identity']

                # Feed the new order to Relay
                result=relay.SendWebhook(newOrder)
                oid=GetOrderID(result)
                if oid!=None:
                    orderDetail=relay.GetOrderDetails(OrderID=oid)

                    # find trade close time and  duration
                    parts=orderDetail[0]['time'].split('.')
                    deS=f"{parts[0]}.{parts[1][:6]}Z"
                    de=datetime.datetime.strptime(deS,'%Y-%m-%dT%H:%M:%S.%fZ')
                    duration=de-ds

                    rpl=float(orderDetail[-1]['pl'])
                    sprice=float(orderDetail[-1]['price'])

                    # rpl is reported by broker. This is the actual profit/loss of trade.
                    if rpl>=0:
                        LogMSG=f"{oid} -> {cid} Prft {dir}, {units}: {price:.5f} -> {sprice:5f}/{abs(rpl):.5f}, {duration}"
                    else:
                        LogMSG=f"{oid} -> {cid} Loss {dir}, {units}: {price:.5f} -> {sprice:5f}/{abs(rpl):.5f}, {duration}"
                    relay.JRLog.Write(f"{LogMSG}",stdOut=False)

                    if rpl>0:
                        # Don't reduce if we have a loss from slippage

                        if 'ReduceBy' in relay.Active:
                            val=abs(int(relay.Active['ReduceBy']))
                            if val>0:
                                ReduceLotSize(relay,relay.Order['Asset'],val)
                        elif 'ReduceBy' in relay.Order:
                            val=abs(int(relay.Order['ReduceBy']))
                            if val>0:
                                ReduceLotSize(relay,relay.Order['Asset'],val)

                    # Order must be closed as it succedded
                    newOrder['ID']=oid
                    relay.WriteLedger(Order=newOrder,Response=result)
                    FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],'Delete')
                else:
                    # Give OliverTwist a response
                    relay.JRLog.Write(f"{id} -> {cid}: Order failed",stdOut=False)
                    FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],Orphan['Status'])
            else:
                # Strike did not happen
                FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],Orphan['Status'])

        # Fall through. No order matching the ID.
        FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],'Delete')
    except Exception as e:
        # Something broke or went horrible wrong
        ln=traceback.extract_tb(sys.exc_info()[2])[-1][1]
        relay.JRLog.Write(f"{Orphan['Key']}: Code Error {ln} - {str(e)}",stdOut=False)
        FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],Orphan['Status'])

if __name__ == '__main__':
    main()

