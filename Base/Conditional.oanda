#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# OANDA Conditional Orders - OliverTwist

# Jackrabbit Relay
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

# This is the framework used by OliverTwist to process conditional orders.

# Pull the actual fill price from open trades

# SellAction of Close sets Units to all and closes the entire position. Sell uses the Oanda ticket system.

import sys
sys.path.append('/home/GitHub/JackrabbitRelay/Base/Library')
import os
import json
import time

import JRRsupport
import JackrabbitRelay as JRR

# Timeout before Locker auto-deletes this order result

OliverTwistTimeout=(15*60)

# Write the result to Locker memory so parent knows we are finished.

def FinishOrphan(Key,lID,mID,State):
    # Get the lock read and set up the memory key. Locker doesn't care and which class this order belongs to. OliverTwist will
    # match the ID to the right class list, orphan or conditional.

    OliverTwistLock=JRRsupport.Locker("OliverTwist",ID=lID)
    Memory=JRRsupport.Locker(Key,ID=mID)

    OliverTwistLock.Lock()

    State=State.lower()

    if State!='delete':
        # Return this order to a waiting state
        Memory.Put(OliverTwistTimeout*100,"Waiting")
    elif State=='delete':
        # This order has been processed and needs to be removed from the system.
        Memory.Put(OliverTwistTimeout*100,"Delete")

    OliverTwistLock.Unlock()

    # We're done. This child has completed its task
    sys.exit(0)

# Get the order ID. If there isn't an ID, the order FAILED.

def GetOrderID(res):
    if res.find('Order Confirmation ID')>-1:
        s=res.find('ID:')+4
        for e in range(s,len(res)):
            if res[e]=='\n':
                break
        oid=res[s:e]

        return oid
    return None

# Calculate Price

def CalculatePriceExit(order,ts,dir,price):
    # Figure out TakeProfit or Stoploss
    if ts=='TakeProfit':
        if '%' in order[ts]:
            if dir=='long':
                val=price+((float(order[ts].replace('%','').strip())/100)*price)
            else:
                val=price-((float(order[ts].replace('%','').strip())/100)*price)
        # Pips
        elif 'p' in order[ts].lower():
            if dir=='long':
                val=price+(float(order[ts].lower().replace('p','').strip())*0.0001)
            else:
                val=price-(float(order[ts].lower().replace('p','').strip())*0.0001)
        else:
            val=float(order[ts])
    elif ts=='StopLoss':
        if '%' in order[ts]:
            if dir=='long':
                val=price-((float(order[ts].replace('%','').strip())/100)*price)
            else:
                val=price+((float(order[ts].replace('%','').strip())/100)*price)
        # Pips
        elif 'p' in order[ts].lower():
            if dir=='long':
                val=price-(float(order[ts].lower().replace('p','').strip())*0.0001)
            else:
                val=price+(float(order[ts].lower().replace('p','').strip())*0.0001)
        else:
            val=float(order[ts])

    return val

###
### Main driver
###

def main():
    data=sys.stdin.read().strip()
    Orphan=json.loads(data)

    # Use Relay to process and validate the order
    if type(Orphan['Order']) is dict:
        order=json.dumps(Orphan['Order'])
    else:
        order=Orphan['Order']

    relay=JRR.JackrabbitRelay(framework=Orphan['Framework'],payload=order,NoIdentityVerification=True)
    relay.JRLog.SetBaseName('OliverTwist')

    try:
        # Check to see if order is still open and return current state
        # Handle OANDa's weird order id sequencing
        id=Orphan['ID']
        cid=relay.GetOrderDetails(OrderID=Orphan['ID'])[-1]['id']
        saction=relay.Order['SellAction'].lower()

        # Used to determin if the asset/poition has been found
        foundPrice=False

        # Manage average and close extire position
        if saction=='close':
            positions=relay.GetPositions()
            if positions!=None:
                for pos in positions:
                    if pos['instrument'].replace('_','/')==relay.Order['Asset']:
                        foundPrice=True
                        price=float(pos[dir]['averagePrice'])
                        units=abs(float(pos[dir]['units']))
                        break
        else:
            # Manage a single ticket
            openTrades=relay.GetOpenTrades(symbol=relay.Order['Asset'])
            # no open trades
            if openTrades==[]:
                # Fall through. No order matching the ID.
                FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],'Delete')

            for cur in openTrades:
                if cur['id']==cid:
                    # Get the fill price from the response entry
                    foundPrice=True
                    price=float(cur['price'])
                    units=abs(float(cur['currentUnits']))
                    break

        # Process the position
        if foundPrice==True:
            # We need to check TakeProfit and StopLoss. If one of them is hit, we need to build and order and backfeed it in
            # to Relay. It will place a new order.

            # Get the direction of the trade, long/short
            dir=relay.Order['Direction'].lower()
            # Get Ticker
            ticker=relay.GetTicker(symbol=relay.Order['Asset'])

            # Fsilsafe, in the WORST way possible. Do NOT leave a take profit out of the order. At this stage, the whole thing is
            # an absolute nightmare to fix. The is a very brutal way of dealing with poor user choices.
            if 'TakeProfit' not in relay.Order:
                relay.Order['TakeProfit']='10p'
            # Calculate Take Profit
            tp=round(CalculatePriceExit(relay.Order,'TakeProfit',dir,price),5)

            # Figure out StopLoss, if there is one
            if 'StopLoss' in relay.Order:
                sl=round(CalculatePriceExit(relay.Order,'StopLoss',dir,price),5)

            # Get the "strikePrice". This handles both TakeProfit and StopLoss. It doesn't matter which as both are processed
            # the same way.

            StrikeHappened=False
            if dir=='long':
                if 'Diagnostics' in relay.Active:
                    relay.JRLog.Write(f"{id}: {dir} Price: {price}, Bid: {ticker['Bid']} TP: {tp}/{relay.Order['TakeProfit']}, SL {sl}/{relay.Order['StopLoss']}",stdOut=False)

                if ticker['Bid']>tp:
                    profit=round((units*ticker['Bid'])-(units*price),5)
                    relay.JRLog.Write(f"{id}: TP {dir} hit: {tp}, {units}: {price:.5f} -> {ticker['Bid']:5f}/{profit}",stdOut=False)
                if 'StopLoss' in relay.Order and ticker['Bid']<sl:
                    loss=round((units*price)-(units*ticker['Bid']),5)
                    relay.JRLog.Write(f"{id}: SL {dir} hit: {sl}, {units}: {price:.5f} -> {ticker['Bid']:5f}/{loss}",stdOut=False)

                if ticker['Bid']>tp or ('StopLoss' in relay.Order and ticker['Bid']<sl):
                    strikePrice=ticker['Bid']
                    StrikeHappened=True
            else:
                if 'Diagnostics' in relay.Active:
                    relay.JRLog.Write(f"{id}: {dir} Price: {price}, Ask: {ticker['Ask']} TP: {tp}/{relay.Order['TakeProfit']}, SL {sl}/{relay.Order['StopLoss']}",stdOut=False)

                if ticker['Ask']<tp:
                    profit=round((units*price)-(units*ticker['Ask']),5)
                    relay.JRLog.Write(f"{id}: TP {dir} hit: {tp}, {units}: {price:.5f} -> {ticker['Ask']:5f}/{profit}",stdOut=False)
                if 'StopLoss' in relay.Order and ticker['Ask']>sl:
                    loss=round((units*ticker['Ask'])-(units*price),5)
                    relay.JRLog.Write(f"{id}: SL {dir} hit: {sl}, {units}: {price:.5f} -> {ticker['Ask']:5f}/{loss}",stdOut=False)

                if ticker['Ask']<tp or ('StopLoss' in relay.Order and ticker['Ask']>sl):
                    strikePrice=ticker['Ask']
                    StrikeHappened=True

            if StrikeHappened==True:
                # Build "strike" order. TakeProfit or StopLoss has been triggered
                newOrder={}
                newOrder['OliverTwist']='Conditional'
                newOrder['Exchange']=relay.Order['Exchange']
                newOrder['Account']=relay.Order['Account']
                newOrder['Asset']=relay.Order['Asset']
                newOrder['Action']=relay.Order['SellAction']
                if 'EnforceFIFO' in relay.Order:
                    newOrder['EnforceFIFO']=relay.Order['EnforceFIFO']
                newOrder['Price']=str(strikePrice)
                if saction=='close':
                    # Set trade polarity
                    if dir=='long':
                        newOrder['Units']='ALL'
                    else:
                        newOrder['Units']='-ALL'
                else:
                    newOrder['Units']=relay.Order['Units']
                    newOrder['Ticket']=str(cid)
                if 'OrderType' in relay.Order:
                    newOrder['OrderType']=relay.Order['OrderType']
                else:
                    newOrder['OrderType']='market'

    #            relay.JRLog.Write(f"{id}: {json.dumps(newOrder)}",stdOut=False)

                newOrder['Identity']=relay.Active['Identity']

                # Feed the new order to Relay
                result=relay.SendWebhook(newOrder)
                oid=GetOrderID(result)
                if oid!=None:
                    resp=relay.GetOrderDetails(OrderID=oid)
                    # Order must be closed as it succedded
                    newOrder['ID']=oid
                    relay.WriteLedger(Order=newOrder,Response=resp)
                    FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],'Delete')
                else:
                    # Give OliverTwist a response
                    relay.JRLog.Write(f"{id}: Order failed",stdOut=False)
                    FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],cur['state'])
            else:
                # Strike did not happen
                FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],cur['state'])

        # Fall through. No order matching the ID.
        FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],'Delete')
    except Exception as e:
        # Something broke or went horrible wrong
        relay.JRLog.Write(f"{Orphan['Key']}: Code Error - {str(e)}",stdOut=False)
        FinishOrphan(Orphan['Key'],Orphan['lID'],Orphan['mID'],cur['state'])

if __name__ == '__main__':
    main()
