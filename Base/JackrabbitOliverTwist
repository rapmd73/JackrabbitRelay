#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit OliverTwist
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

# This is the Jackrabbit limit order manager. Its purpose is to track and maintain
# "orphaned" orders. Orphan orders are liit order that the parent or order
# initiator does not wat a response for. TradingView is an example, but the
# situation applies to any process that does not manage or maintain limit orders on
# their own.

# IMPORTANT: Under no circumstances should THIS program manage an individual order.
# It is to be managed by a separate process, called an orphan manager. This is
# simply because there is no way on knowing how many exchanges/brokers might be
# used simultaneously. The memory of a single process managing a thousand orders
# would be absolutely thrashed. The orphan manager will follow the same conventions
# of the PlaceOrder program, ie:

# Old:
#    Orphan.ccxt
#    Orphan.oanda
#    Conditional.ccxt
#    Conditional.oanda
#    Conditional.mimic

# New:
#   OliverTwist-ccxt
#   OliverTwist-mimic
#   OliverTwist-oanda

# ANY order (direct orphan or conditional) is an ORPHAN at all times withis THIS
# framework.

# IMPORTANT: This fraework treats conditionals the same as orphans. The separation
# and distinction takes place in the transactor. While this has plenty of issues to
# be aware of, it is the most effecient way of handling the situation since at this
# level (dispatcher), they are syntactically the same.

# Framework identification, along with any other order verification, is done in the
# PlaceOrder

# MIGRATE to checking the highest (take profit) and lowat prices (stop loss),
# rather then checking every order. This will optimize heavy usagevsystem to handle
# the most relevant orders first. Will need rethings on order list processing
# approach and methedology.

# MOVE to reading storehouse every pass and write price data into main store
# house... Reading orderdetails is 3 minutes for order sweep, pre processing orders
# brings the time down to 0.00015 seconds. Be re-reading the storehouse each pass,
# we can update order as received to maintain sweepspeed. Reading the ticker will
# slow thing down, but breaking the storehouse down to exchange/account/asset with
# high/low extreme analysis will dramatically improve performance.

import sys
sys.path.append('/home/JackrabbitRelay2/Base/Library')
import os
import atexit
import importlib
import datetime
import time
import json
import random
import subprocess

import JRRsupport
import JackrabbitRelay as JRR

Version="0.0.0.1.1015"
BaseDirectory='/home/JackrabbitRelay2/Base'
DataDirectory='/home/JackrabbitRelay2/Data'
ConfigDirectory='/home/JackrabbitRelay2/Config'
LogDirectory="/home/JackrabbitRelay2/Logs"
OliverTwistData=DataDirectory+'/OliverTwist'
Receiver=DataDirectory+'/OliverTwist.Receiver'

# Get the number of active CPUs

NumberProcesses=os.cpu_count()

# Set up the logging system

JRLog=JRR.JackrabbitLog()
JRLog.SetBaseName('JackrabbitOliverTwist')

# Set up signal interceptor

interceptor=JRRsupport.SignalInterceptor(Log=JRLog)

# The timeout setting for the memory locks. If it takes longer then 15 minutes to
# check the status of an order, there is a major problem with the exchange/broker.
# Testing has show that only a few seconds is actually requred. The extended amount
# is just to compensate for an overloaded server.

OliverTwistTimeout=60   # (15*60)

# This lock guards the lists. Both PlaceOrder.olivertwist and
# JackrabbitOliverTwist will access this file. Collisions must not be allowed to
# happen.

OliverTwistLock=JRRsupport.Locker("OliverTwist")

# This will be used for memory locks and data transfer between parent/child

OrphanMemory={}

# Generate a random ID

def GetID():
    letters="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    llen=len(letters)

    pw=""
    oc=""

    for i in range(20):
        done=False
        while not done:
            for z in range(random.randrange(73,237)):
                c=random.randrange(llen)
            if pw=="" or (len(pw)>0 and letters[c]!=oc):
                done=True
        oc=letters[c]
        pw+=oc
    return pw

# Split the complete list stored on disk, if it exists. Supports both orphans and
# conditionals. RUNS ONLY ONCE, no locking needed as this runs at the very start,
# if it runs at all. At some FUTURE point, this will be REMOVED.

def SplitStorehouse(cltype=None):
    # Required as the blobals are modified
    global OliverTwistLock
    global JRLog

    # Check if Directory exists
    JRRsupport.mkdir(OliverTwistData)

    # Setup mechanism to switch between orphan and conditional storehouses
    if cltype=='Orphan':
        WorkingStorehouse=DataDirectory+'/OliverTwist.Orphans.Storehouse'
    elif cltype=='Conditional':
        WorkingStorehouse=DataDirectory+'/OliverTwist.Conditional.Storehouse'
    else:
        WorkingStorehouse=DataDirectory+'/OliverTwist.Storehouse'

    rc=0
    if os.path.exists(WorkingStorehouse):
        buffer=JRRsupport.ReadFile(WorkingStorehouse).strip()
        if buffer!=None and buffer!='':
            Orphans=buffer.split('\n')

            # Remove empty lines
            while '' in Orphans:
                Orphans.remove('')

            for Entry in Orphans:
                # Force set InMotion to False
                Entry=Entry.strip()
                # Break down entry and set up memory locker
                try:
                    Orphan=Entry
                    while type(Orphan)==str:
                        Orphan=json.loads(Orphan)
                except:
                    JRLog.Write(f"Broken: {Entry}")
                    continue

                # I need to be able to extract Exchange, account, and asset to
                # build the separate pair files.

                if 'Order' in Orphan:
                    if type(Orphan['Order'])==str:
                        order=json.loads(Orphan['Order'])
                    else:
                        order=Orphan['Order']
                    order.pop('Identity',None)
                else:
                    JRLog.Write(f"Broken: {Entry}")
                    continue

                # Now we have the needed information.

                exchange=order['Exchange']
                account=order['Account']
                asset=order['Asset'].replace('/','').replace('-','').replace(':','').replace(' ','')
                idx=f"{exchange}.{account}.{asset}"
                fname=f"{OliverTwistData}/{idx}.Storehouse"

                # Write out the new storehouse. We already have the complete line
                # from the original, just use it. This is not about preprocessing,
                # only converting.

                JRRsupport.AppendFile(fname,Entry+'\n')
                rc+=1

            if rc>0:
                JRLog.Write(f"{rc} record(s) converted")

# Read the complete list stored on disk, if it exists. Supports both orphans and
# conditionals.

def ReadReceiver():
    # Required as the blobals are modified
    global OliverTwistLock
    global JRLog

    # Check if Directory exists
    JRRsupport.mkdir(OliverTwistData)

    WorkingStorehouse=Receiver

    # Wait until the file is Unlocked

    while OliverTwistLock.Lock()!='locked':
        JRRsupport.ElasticSleep(1)

    rc=0
    if os.path.exists(WorkingStorehouse):
        buffer=JRRsupport.ReadFile(WorkingStorehouse).strip()
        if buffer!=None and buffer!='':
            Orphans=buffer.split('\n')

            # Remove empty lines
            while '' in Orphans:
                Orphans.remove('')

            for Entry in Orphans:
                # Force set InMotion to False
                Entry=Entry.strip()

                # Break down entry and set up memory locker
                try:
                    Orphan=Entry
                    while type(Orphan)==str:
                        Orphan=json.loads(Orphan)
                except:
                    JRLog.Write(f"Broken: {Entry}")
                    continue

                # Don't add duplicates
                if 'Key' in Orphan and Orphan['Key'] in OrphanList:
                    continue

                if 'Order' in Orphan:
                    if type(Orphan['Order'])==str:
                        order=json.loads(Orphan['Order'])
                    else:
                        order=Orphan['Order']
                    order.pop('Identity',None)
                else:
                    JRLog.Write(f"Broken: {Entry}")
                    continue
                Orphan['Order']=order

                if 'Response' in Orphan:
                    if type(Orphan['Response'])==str:
                        resp=json.loads(Orphan['Response'])
                        Orphan['Response']=resp

                # Assign a key, if not already present.

                if 'Key' not in Orphan:
                    Orphan['Key']=f"{time.time()*10000000:.0f}.{GetID()}"

                # Only LIMIT orders are orphans, everything else is conditional

                try:
                    if 'OrderType' in order and 'limit' in order['OrderType'].lower():
                        Orphan['Class']='Orphan'
                    elif 'Conditional' in order:
                        Orphan['Class']='Conditional'
                except Exception as err:
                    JRLog.Write(f"Broken classifier: {Entry}")
                    continue

                # Make sure price IS of orphan data

                if 'Price' not in Orphan:
                    if Orphan['Framework']=='oanda':
                        try:
                            relay=JRR.JackrabbitRelay(exchange=Orphan['Order']['Exchange'],account=Orphan['Order']['Account'],asset=Orphan['Order']['Asset'],RaiseError=True)
                            od=relay.GetOrderDetails(OrderID=Orphan['ID'])[-1]
                            Orphan['cID']=od['id']
                            Orphan['Price']=od['price']
                        except Exception as err:
                            pass
                    elif Orphan['Framework']=='mimic':
                        Orphan['Price']=Orphan['Response']['Price']
                    elif Orphan['Framework']=='ccxt':
                        Orphan['Price']=Orphan['Response']['price']

                # Now we have the needed information.

                exchange=order['Exchange']
                account=order['Account']
                asset=order['Asset'].replace('/','').replace('-','').replace(':','').replace(' ','')
                idx=f"{exchange}.{account}.{asset}"
                fname=f"{OliverTwistData}/{idx}.Storehouse"

                # Write out the new storehouse.

                JRRsupport.AppendFile(fname,json.dumps(Orphan)+'\n')
                rc+=1

            if rc>0:
                JRLog.Write(f"{rc} record(s) received")
                os.remove(WorkingStorehouse)
    OliverTwistLock.Unlock()

# Get the list of storehouses, and build an index.

def ReadStorehouseIndex():
    StorehouseIDX={}
    shf=os.listdir(OliverTwistData)

    for idx in shf:
        if '.Storehouse' in idx:
            ind=idx.replace('.Storehouse','')
            StorehouseIDX[ind]=f"{OliverTwistData}/{idx}"
    return StorehouseIDX

# Write this orphan list to disk

def WriteStorehouse(idx,OrphanList,deleteKey=None):
    Storehouse=f"{OliverTwistData}/{idx}.Storehouse"

    StartTime=datetime.datetime.now()
    interceptor.Critical(True)

    fh=open(Storehouse,"w")
    for cur in OrphanList:
        if deleteKey==None or OrphanList[cur]['Key']!=deleteKey:
            fh.write(json.dumps(OrphanList[cur])+'\n')
    fh.close()

    interceptor.Critical(False)
    JRLog.Write(f"{idx}/{len(OrphanList)} order(s) written in {str(datetime.datetime.now()-StartTime)} seconds")

# Read the complete list stored on disk, if it exists. Supports both orphans and
# conditionals.

def ReadStorehouse(idx=None,OrigOrphanList=None):
    # Required as the blobals are modified
    global OliverTwistLock
    global JRLog

    # Check if Directory exists
    JRRsupport.mkdir(OliverTwistData)

    if idx==None:
        Storehouse=None
        WorkingStorehouse=Receiver
    else:
        Storehouse=f"{OliverTwistData}/{idx}.Storehouse"
        WorkingStorehouse=Storehouse

    if OrigOrphanList==None:
        OrphanList={}
    else:
        OrphanList=OrigOrphanList.copy()

    # Wait until the file is Unlocked

    while OliverTwistLock.Lock()!='locked':
        JRRsupport.ElasticSleep(1)

    rc=0
    if os.path.exists(WorkingStorehouse):
        buffer=JRRsupport.ReadFile(WorkingStorehouse).strip()
        if buffer!=None and buffer!='':
            Orphans=buffer.split('\n')

            # Remove empty lines
            while '' in Orphans:
                Orphans.remove('')

            for Entry in Orphans:
                # Force set InMotion to False
                Entry=Entry.strip()

                # Break down entry and set up memory locker
                try:
                    Orphan=Entry
                    while type(Orphan)==str:
                        Orphan=json.loads(Orphan)
                except:
                    JRLog.Write(f"Broken: {Entry}")
                    continue

                # No duplicate ntries
                if 'Key' in Orphan and Orphan['Key'] in OrphanList:
                    continue

                if 'Order' in Orphan:
                    if type(Orphan['Order'])==str:
                        order=json.loads(Orphan['Order'])
                    else:
                        order=Orphan['Order']
                    order.pop('Identity',None)
                else:
                    JRLog.Write(f"Broken: {Entry}")
                    continue
                Orphan['Order']=order

                if 'Response' in Orphan:
                    if type(Orphan['Response'])==str:
                        resp=json.loads(Orphan['Response'])
                        Orphan['Response']=resp

                # Assign a key, if not already present.

                if 'Key' not in Orphan:
                    Orphan['Key']=f"{time.time()*10000000:.0f}.{GetID()}"

                # Only LIMIT orders are orphans, everything else is conditional
                try:
                    if 'OrderType' in order and 'limit' in order['OrderType'].lower():
                        Orphan['Class']='Orphan'
                    elif 'Conditional' in order:
                        Orphan['Class']='Conditional'
                except Exception as err:
                    JRLog.Write(f"Broken classifier: {Entry}")
                    continue

                # Make sure price IS of orphan data

                if 'Price' not in Orphan:
                    if Orphan['Framework']=='oanda':
                        try:
                            relay=JRR.JackrabbitRelay(exchange=Orphan['Order']['Exchange'],account=Orphan['Order']['Account'],asset=Orphan['Order']['Asset'],RaiseError=True)
                            od=relay.GetOrderDetails(OrderID=Orphan['ID'])[-1]
                            Orphan['cID']=od['id']
                            Orphan['Price']=od['price']
                        except Exception as err:
                            pass
                    elif Orphan['Framework']=='mimic':
                        Orphan['Price']=Orphan['Response']['Price']
                    elif Orphan['Framework']=='ccxt':
                        Orphan['Price']=Orphan['Response']['price']

                OrphanList[Orphan['Key']]=Orphan

    OliverTwistLock.Unlock()
    return OrphanList

# Process the individual orphan storehouse
# osh Orphan Storehouse

# --> CHILD LEVEL

def ProcessOrphan(**kwargs):
    global JRLog

    osh=kwargs
    State='Waiting'

    # Massive headache: One of the most significant issues is that we don't know
    # anything about any of the orders, so the processor needs to deal with
    # everthing now in a layered approach. At the level we are at in this function,
    # we only know the index and framework. Orphan and Conditional status is
    # completely unknown...

    try:
        # We NEED the framework.
        idxList=osh['IDX'].split('.')
        relay=JRR.JackrabbitRelay(exchange=idxList[0],account=idxList[1],asset=idxList[2])

        # IMPORTANT: Modules loaded this way do NOT have access to anything of the
        # parent. These modules are in complete and total isolation.

        Processor=importlib.import_module(f"OliverTwist-{relay.Framework}")
        State=Processor.OrderProcessor(osh)
    except Exception as err:
        JRLog.Write(f"Broke {sys.exc_info()[-1].tb_lineno}: {osh['IDX']}, {err}")

    otLock=JRRsupport.Locker("OliverTwist",ID=osh['lID'])
    Memory=JRRsupport.Locker(osh['IDX'],ID=osh['mID'])
    otLock.Lock()
    Memory.Put(OliverTwistTimeout,State)
    otLock.Unlock()

# Process the individual index and handle all multi process functionality
#    OrphanList=ReadStorehouse(idx=idx)

# --> PARENT LEVEL

def ProcessChild(idx):
    # Required as the globals are modified
    global NumberProcesses
    global OliverTwistLock
    global OrphanMemory
    global JRLog

    # Get result from Locker

    OliverTwistLock.Lock()
    if idx in OrphanMemory:
        sData=json.loads(OrphanMemory[idx].Get())
    else:
        sData={ "Status":"waiting" }
    OliverTwistLock.Unlock()

    if 'DataStore' in sData:
        status=sData['DataStore'].lower()
    else:
        status=sData['Status'].lower()

    # This check must contain all possible expected values.

    if status!='running':
        status='waiting'

    OliverTwistLock.Lock()

    # Only run if not already running. It is possible for this state to
    # occur, especially if there are only a few orders to process or a
    # very fast broker.

    # ID *MUST* be dynamic for security. Howver, the child process has
    # to have it in order to access the data store. orphan lock and
    # orphan memory IDs will be different.

    if status=='waiting':
        osh={}  # Orphan Storehouse data
        osh['IDX']=idx
        osh['lID']=OliverTwistLock.ID
        osh['mID']=OrphanMemory[idx].ID
        OrphanMemory[idx].Put(OliverTwistTimeout,"Running")
        interceptor.StartProcess(ProcessOrphan,kwargs=osh)

    OliverTwistLock.Unlock()

    # Process any signals received during critical section
    interceptor.SafeExit()

###
### Main driver
###

def main():
    global NumberProcesses

    JRLog.Write('OliverTwist '+Version)

    if len(sys.argv)>1:
        NumberProcesses=int(sys.argv[1])
    JRLog.Write(f'Spawning {NumberProcesses} sub-processes')

    # Flush the command line
    for i in range(1,len(sys.argv)):
        sys.argv.remove(sys.argv[1])

    # Start with nothing.
    OrphanList=None

    # Deal with the old storehouse and build the new storehouses
    if not os.path.isdir(OliverTwistData):
        SplitStorehouse()

    # Start the main loop

    while True:
        StartTime=datetime.datetime.now()

        # Read the list of storehouses
        ReadReceiver()
        StorehouseIDX=ReadStorehouseIndex()
        for idx in StorehouseIDX:
            # Create the orphan memory and assign it to Waiting
            if idx not in OrphanMemory:
                OrphanMemory[idx]=JRRsupport.Locker(idx)
                OrphanMemory[idx].Put(OliverTwistTimeout,"Waiting")

            # Multiprocess functionality goes here
            ProcessChild(idx)

            # Process any signals received during critical section
            interceptor.SafeExit()

            # Only allow "NumberProcesses" children to run as once.
            while interceptor.GetChildren()>(NumberProcesses-1):
                JRRsupport.ElasticSleep(1)

        # Wait for all children to finish
        if os.path.exists(f"{DataDirectory}/OliverTwist.rest"):
            while interceptor.GetChildren()>0:
                JRRsupport.ElasticSleep(1)

        EndTime=datetime.datetime.now()
        Elapsed=(EndTime-StartTime)
#        if len(idx)>(NumberProcesses*3):
#            JRLog.Write(f"{len(StorehouseIDX)} assets scanned in "+str(Elapsed)+" seconds")

        JRRsupport.ElasticSleep(1)
        # Safe way of cleanly existing to tracking and diagnostics
        if os.path.exists(f"{DataDirectory}/OliverTwist.rest"):
            sys.exit(0)

if __name__=='__main__':
    main()
