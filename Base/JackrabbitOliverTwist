#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit OliverTwist
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

# This is the Jackrabbit limit order manager. Its purpose is to track and maintain "orphaned" orders. Orphan orders are liit
# order that the parent or order initiator does not wat a response for. TradingView is an example, but the situation applies
# to any process that does not manage or maintain limit orders on their own.

# IMPORTANT: Under no circumstances should THIS program manage an individual order. It is to be managed by a separate process,
# called an orphan manager. This is simply because there is no way on knowing how many exchanges/brokers might be used
# simultaneously. The memory of a single process managing a thousand orders would be absolutely thrashed. The orphan manager
# will follow the same conventions of the PlaceOrder program, ie:

#    Orphan.ccxt
#    Orphan.oanda
#    Conditional.ccxt
#    Conditional.oanda
#    Conditional.mimic

# ANY order (direct orphan or conditional) is an ORPHAN at all times withis THIS framework.

# IMPORTANT: This fraework treats conditionals the same as orphans. The separation and distinction takes
# place in the transactor. While this has plenty of issues to be aware of, it is the most effecient way of
# handling the situation since at this level (dispatcher), they are syntactically the same.

# Framework identification, along with any other order verification, is done in the PlaceOrder

import sys
sys.path.append('/home/JackrabbitRelay2/Base/Library')
import os
import atexit
import importlib
import datetime
import time
import json
import random
import subprocess

import JRRsupport
import JackrabbitRelay as JRR

Version="0.0.0.1.950"
BaseDirectory='/home/JackrabbitRelay2/Base'
DataDirectory='/home/JackrabbitRelay2/Data'
ConfigDirectory='/home/JackrabbitRelay2/Config'
LogDirectory="/home/JackrabbitRelay2/Logs"

Receiver=DataDirectory+'/OliverTwist.Receiver'
Storehouse=DataDirectory+'/OliverTwist.Storehouse'

NumberProcesses=os.cpu_count()

# Set up the logging system

JRLog=JRR.JackrabbitLog()

# Set up signal interceptor

interceptor=JRRsupport.SignalInterceptor(Log=JRLog)

# The timeout setting for the memory locks. If it takes longer then 15 minutes to
# check the status of an order, there is a major problem with the exchange/broker.
# Testing has show that only a few seconds is actually requred. The extended amount
# is just to compensate for an overloaded server.

OliverTwistTimeout=(15*60)
OliverTwistCount=1

# This lock guards the lists. Both PlaceOrder.olivertwist and
# JackrabbitOliverTwist will access this file. Collisions must not be allowed to
# happen.

OliverTwistLock=JRRsupport.Locker("OliverTwist")

# The list of orphaned orders to track and manage. Must be global, but after
# compare function declared.

OrphanList={}
OrphanMemory={}

# Generate a random ID

def GetID():
    letters="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    llen=len(letters)

    pw=""
    oc=""

    for i in range(20):
        done=False
        while not done:
            for z in range(random.randrange(73,237)):
                c=random.randrange(llen)
            if pw=="" or (len(pw)>0 and letters[c]!=oc):
                done=True
        oc=letters[c]
        pw+=oc
    return pw

def WriteStorehouse():
    global OliverTwistLock
    global OrphanList
    global ConditionalList

    StartTime=datetime.datetime.now()
    interceptor.Critical(True)

    fh=open(Storehouse,"w")
    for cur in OrphanList:
        fh.write(json.dumps(OrphanList[cur])+'\n')
    fh.close()

    interceptor.Critical(False)
    JRLog.Write(f"{len(OrphanList)} order(s) written in {str(datetime.datetime.now()-StartTime)} seconds")

# Read the complete list stored on disk, if it exists. Supports both orphans and conditionals.

def ReadStorehoue(cltype=None,receiver=False):
    # Required as the blobals are modified
    global OliverTwistCount
    global OliverTwistLock
    global OrphanList
    global OrphanMemory
    global JRLog

    # Setup mechanism to switch between orphan and conditional storehouses
    if cltype=='Orphan':
        if receiver==True:
            WorkingStorehouse=DataDirectory+'/OliverTwist.Orphans.Receiver'
        else:
            WorkingStorehouse=DataDirectory+'/OliverTwist.Orphans.Storehouse'
    elif cltype=='Conditional':
        if receiver==True:
            WorkingStorehouse=DataDirectory+'/OliverTwist.Conditional.Receiver'
        else:
            WorkingStorehouse=DataDirectory+'/OliverTwist.Conditional.Storehouse'
    else:
        if receiver==True:
            WorkingStorehouse=Receiver
        else:
            WorkingStorehouse=Storehouse

    # Wait until the file is Unlocked

    while OliverTwistLock.Lock()!='locked':
        JRRsupport.ElasticSleep(1)

    rc=0
    if os.path.exists(WorkingStorehouse):
        buffer=JRRsupport.ReadFile(WorkingStorehouse).strip()
        if buffer!=None and buffer!='':
            Orphans=buffer.split('\n')
            OliverTwistCount=len(Orphans)
            for Entry in Orphans:
                # Force set InMotion to False
                Entry=Entry.strip()
                if Entry=='':
                    continue
                # Break down entry and set up memory locker
                try:
                    Orphan=Entry
                    while type(Orphan)==str:
                        Orphan=json.loads(Orphan)
                except:
                    JRLog.Write(f"Broken: {Entry}")
                    continue

                if 'Key' in Orphan and Orphan['Key'] in OrphanList:
                    continue

                if 'Order' in Orphan:
                    if type(Orphan['Order'])==str:
                        order=json.loads(Orphan['Order'])
                        order.pop('Identity',None)
                        Orphan['Order']=order
                if 'Response' in Orphan:
                    if type(Orphan['Response'])==str:
                        resp=json.loads(Orphan['Response'])
                        Orphan['Response']=resp

                if 'Key' not in Orphan:
                    Orphan['Key']=f"{time.time()*10000000:.0f}.{GetID()}"

                # Make sure there are NO duplicate keys
                while Orphan['Key'] in OrphanList:
                    Orphan['Key']=f"{time.time()*10000000:.0f}.{GetID()}"

                if cltype=='Orphan':
                    Orphan['Class']='Orphan'
                elif cltype=='Conditional':
                    Orphan['Class']='Conditional'

                OrphanList[Orphan['Key']]=Orphan

                OrphanMemory[Orphan['Key']]=JRRsupport.Locker(Orphan['Key'])
                OrphanMemory[Orphan['Key']].Put(OliverTwistTimeout*OliverTwistCount,"Waiting")
                rc+=1

            if rc>0:
                if receiver==False:
                    JRLog.Write(f"{rc} record(s) read")
                else:
                    JRLog.Write(f"{rc} record(s) received")

            # If this is an older file, delete it after te order are processed.
            if cltype!=None or receiver==True:
                WriteStorehouse()
                if WorkingStorehouse!=Storehouse:
                    os.remove(WorkingStorehouse)

    OliverTwistLock.Unlock()

# This spins up the orphan manager to ensure each orphan is handled. This is NOT part of the main process, but
# rather a child process. NONE o the global or main variables are available. The ONLY information know is what is
# EXPLICTLY given.

# An Orphan transactor will process orphans. A relatively easy process compared to the Conditional transactor.
# The Condiional transactor will need to back feed orders into Relay, usingsimilat techniques compared to the
# PlaceOrder system. The Conditional framework will be a logistical nightmare. Emphasis has to be on speed in
# processing the conditions.

def ProcessOrphan(**kwargs):
    global OliverTwistCount
    global JRLog

    # The entire kwargs payload is the orphan JSON...
    Orphan=kwargs
    State='Waiting'

    try:
        # Figure out which order processor is needed
        if Orphan['Class']=='Orphan':
            Processor=importlib.import_module(f"ORPHAN{Orphan['Framework']}")
        elif Orphan['Class']=='Conditional':
            Processor=importlib.import_module(f"COND{Orphan['Framework']}")

        State=Processor.OrderProcessor(Orphan)

        if State.lower()=='delete':
            JRLog.Write(f"Delete {Orphan['Class'].lower()}: {Orphan['Key']}")
    except Exception as err:
        JRLog.Write(f"Broke: {Orphan['Key']}, {err}")

    otLock=JRRsupport.Locker("OliverTwist",ID=Orphan['lID'])
    Memory=JRRsupport.Locker(Orphan['Key'],ID=Orphan['mID'])
    otLock.Lock()
    Memory.Put(OliverTwistTimeout*OliverTwistCount,State)
    otLock.Unlock()
    return

# Process each child. Handles both orphans and conditionals

# IMPORTANT: Deletes aren't removed from the storehouse in realtime, but rather on the next list sweep.

def ProcessChild(Orphan):
    # Required as the globals are modified
    global NumberProcesses
    global OliverTwistCount
    global OliverTwistLock
    global OrphanList
    global OrphanMemory
    global JRLog

    # Get result from Locker

    OliverTwistLock.Lock()
    sData=json.loads(OrphanMemory[Orphan['Key']].Get())
    OliverTwistLock.Unlock()

    if 'DataStore' in sData:
        status=sData['DataStore'].lower()
    else:
        status=sData['Status'].lower()

    # This check must contain all possible expected values.

    if status!='delete' and status!='running':
        if status=='done' \
        or status=='notfound' \
        or status=='notowner' \
        or status=='waiting':
            status='waiting'
        else:
            JRLog.Error("Corruption",f"{Orphan['Key']}: {sData}")

    if status=='delete':
        # This is the ONLY way to properly handle deletions that won't risk trashing memory, as this part of the
        # program is guarenteed to be non-parrellel.

        OliverTwistLock.Lock()
        OrphanMemory[Orphan['Key']].Erase()
        OrphanMemory.pop(Orphan['Key'],None)
        OrphanList.pop(Orphan['Key'],None)
        WriteStorehouse()
        OliverTwistLock.Unlock()

        JRLog.Write(f"Processed {Orphan['Class'].lower()}: {Orphan['Key']}")
    else:
        OliverTwistLock.Lock()

        # Only run if not already running. It is possible for this state to
        # occur, especially if there are only a few orders to process or a
        # very fast broker.

        # ID *MUST* be dynamic for security. Howver, the child process has
        # to have it in order to access the data store. orphan lock and
        # orphan memory IDs will be different.

        if status=='waiting':
            Orphan['lID']=OliverTwistLock.ID
            Orphan['mID']=OrphanMemory[Orphan['Key']].ID
            OrphanMemory[Orphan['Key']].Put(OliverTwistTimeout*OliverTwistCount,"Running")
            if NumberProcesses>1:
                interceptor.StartProcess(ProcessOrphan,kwargs=Orphan)
            else:
                ProcessOrphan(**Orphan)

        OliverTwistLock.Unlock()

        # Process any signals received during critical section
        interceptor.SafeExit()

def CleanUp():
    OliverTwistLock.Unlock()
    for mem in list(OrphanMemory.keys()):
        OrphanMemory[mem].Erase()

def main():
    # Required as the globals are modified
    global NumberProcesses
    global OliverTwistCount
    global OliverTwistLock
    global OrphanList
    global OrphanMemory
    global JRLog

    JRLog.Write('OliverTwist '+Version)

    if len(sys.argv)>1:
        NumberProcesses=int(sys.argv[1])
    JRLog.Write(f'Spawning {NumberProcesses} sub-processes')

#    atexit.register(CleanUp)

    ReadStorehoue()
    ReadStorehoue(cltype='Orphan')
    ReadStorehoue(cltype='Conditional')

    ReadStorehoue(cltype='Orphan',receiver=True)
    ReadStorehoue(cltype='Conditional', receiver=True)

    while True:
        StartTime=datetime.datetime.now()
        ReadStorehoue(receiver=True)

        # Dynamic factor for memory timeouts
        OliverTwistCount=len(OrphanList)

        # Deleted will break the system otherwise.
        keyList=list(OrphanList.keys())
        for cur in keyList:
            # Process each order

            ProcessChild(OrphanList[cur])

            # Process any signals received during critical section
            interceptor.SafeExit()

            # Only allow "NumberProcesses" children to run as once.

            while interceptor.GetChildren()>(NumberProcesses-1):
                JRRsupport.ElasticSleep(1)

        EndTime=datetime.datetime.now()
        Elapsed=(EndTime-StartTime)
        if len(keyList)>NumberProcesses:
            JRLog.Write(f"{len(keyList)} orders scanned in "+str(Elapsed)+" seconds")

        JRRsupport.ElasticSleep(1)

if __name__ == '__main__':
    main()

