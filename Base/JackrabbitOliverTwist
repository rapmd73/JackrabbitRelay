#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit OliverTwist
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

# This is the Jackrabbit limit order manager. Its purpose is to track and
# maintain "orphaned" orders. Orphan orders are liit order that the parent or
# order initiator does not wat a response for. TradingView is an example, but
# the situation applies to any process that does not manage or maintain limit
# orders on their own.

# IMPORTANT: Under no circumstances should THIS program manage an individual
# order. It is to be managed by a separate process, called an orphan manager.
# This is simply because there is no way on knowing how many exchanges/brokers
# might be used simultaneously. Thememory of a single process managing a
# thousand orders would be absolutely thrashed. The orphan manager will follow
# the same conventions of the PlaceOrder program, ie:

#    Orphan.ccxt
#    Orphan.oanda

import sys
sys.path.append('/home/JackrabbitRelay2/Base/Library')
import os
import time
import json

import JRRsupport

Version="0.0.0.1.0"
BaseDirectory='/home/JackrabbitRelay2/Base'
DataDirectory='/home/JackrabbitRelay2/Data'
ConfigDirectory='/home/JackrabbitRelay2/Config'
LogDirectory="/home/JackrabbitRelay2/Logs"

# The list of orphaned orders to track and manage

# Structure: { subp, payload }

# subp is the return of subprocess.Popen(), None if Popen is not running.
# payload is the original order

OrphanList=JRRsupport.DList()

def ReadOrphanList():
    pass

# Write only when there are changes.

def WriteOrphanList():

###
### Main driver
###

def main():
    # Read saved list from disk into OrphanList

    

    pass

if __name__ == '__main__':
    main()
