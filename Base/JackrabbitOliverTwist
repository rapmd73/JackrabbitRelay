#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit OliverTwist
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

# This is the Jackrabbit limit order manager. Its purpose is to track and
# maintain "orphaned" orders. Orphan orders are liit order that the parent or
# order initiator does not wat a response for. TradingView is an example, but
# the situation applies to any process that does not manage or maintain limit
# orders on their own.

# IMPORTANT: Under no circumstances should THIS program manage an individual
# order. It is to be managed by a separate process, called an orphan manager.
# This is simply because there is no way on knowing how many exchanges/brokers
# might be used simultaneously. The memory of a single process managing a
# thousand orders would be absolutely thrashed. The orphan manager will follow
# the same conventions of the PlaceOrder program, ie:

#    Orphan.ccxt
#    Orphan.oanda

# Framework identification, along with any other order verification, is done in
# PlaceOrder.OliverTwist

import sys
sys.path.append('/home/JackrabbitRelay2/Base/Library')
import os
import time
import json
import random
import multiprocessing
import subprocess

import JRRsupport
import JackrabbitRelay as JRR

Version="0.0.0.1.10"
BaseDirectory='/home/JackrabbitRelay2/Base'
DataDirectory='/home/JackrabbitRelay2/Data'
ConfigDirectory='/home/JackrabbitRelay2/Config'
LogDirectory="/home/JackrabbitRelay2/Logs"

OrphanReceiver=DataDirectory+'/OliverTwist.Receiver'
OrphanStorehouse=DataDirectory+'/OliverTwist.Storehouse'

# The timeout setting for the memory locks. If it takes longer then 15 minutes to
# check the status of an order, there is a major problem with the exchange/broker.
# Testing has show that only a few seconds is actually requred. The extended amount
# is just to compensate for an overloaded server.

OrphanTimeout=(15*60)

# Set up the logging system

JRLog=JRR.JackrabbitLog()

# This lock guards the orphan list. Both PlaceOrder.olivertwist and
# JackrabbitOliverTwist will access this file. Collisions must not be allowed to
# happen.

orphanLock=JRRsupport.Locker("OliverTwist")

# Compare orphan IDs

def compareOrphan(node,dz):
    nData=node.GetData()

    d2=json.loads(nData)['Key']
    d1=json.loads(dz)['Key']

    if d1<d2:
        r=-1
    elif d1>d2:
        r=1
    else:
        r=0

    return r

# The list of orphaned orders to track and manage. Must be global, but after
# compare function declared.

OrphanList=JRRsupport.DList(Compare=compareOrphan)
OrphanMemory={}
OrphanListChanged=False

# We only want to write to disk when there is an actual change in the OrphanList

# Generate a random ID

def GetID():
    letters="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    llen=len(letters)

    pw=""
    oc=""

    for i in range(20):
        done=False
        while not done:
            for z in range(random.randrange(73,237)):
                c=random.randrange(llen)
            if pw=="" or (len(pw)>0 and letters[c]!=oc):
                done=True
        oc=letters[c]
        pw+=oc
    return pw

# Receive an update on an orphan and update, delete, or add to the main list. This is NOT part of the
# main process, but rather a child process. NONE o the global or main variables are available. The ONLY
# information know is what is EXPLICTLY given.

def OrphanUpdate(result):
    if result!=None:
        OrphanTimeout=(15*60)

        # result in JSON format
        # Locking required to protect memory structures

        # At this stage, rData should NEVER be None or undefined. If it is, then
        # memory was thrashed.

        try:
            rData=json.loads(result)
        except:
            JRLog.Write(f"OrphanUpdate ERROR: |{result}|",stdOut=False)
            return

        orphanLock=JRRsupport.Locker("OliverTwist",ID=rData['lID'])
        OrphanMemory=JRRsupport.Locker(rData['Key'],ID=rData['mID'])
        orphanLock.Lock()

        # if returned status is open, replace the response, if it has
        # changed or the orphan record doesn't have a response

        rStatus=rData['Status'].lower()
        if rStatus!='delete': # open/pnding
            # Nothing changed, go back to waiting
            OrphanMemory.Put(OrphanTimeout,"Waiting")
        # if the status returnd is delete, flag for parent
        # do NOT delete here, will trash orphan list.
        elif rStatus=='delete': # or closed
            OrphanMemory.Put(OrphanTimeout,"Delete")
        else:
            JRLog.Write(f"ERROR: {rStatus}/{rData['Key']}",stdOut=False)
        orphanLock.Unlock()

# This spins up the orphan manager to ensure each orphan is handled. This is NOT part of the main
# process, but rather a child process. NONE o the global or main variables are available. The ONLY
# information know is what is EXPLICTLY given.

def ProcessOrphan(Orphan):
    OrphanTimeout=(15*60)
    OrphanManager=BaseDirectory+'/Orphan.'+Orphan['Framework']

    if os.path.exists(OrphanManager):
        transactor=[ OrphanManager ]

        # Time to get down to business

        try:
            payload=json.dumps(Orphan).encode()

            subp=subprocess.Popen(transactor,stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
            subp.stdin.write(payload)
            res=subp.communicate()[0].decode().strip()

            # response will be proper json
            return res
        except:
            # This should never happen, but if it dowes, go back to waiting state
            OrphanMemory=JRRsupport.Locker(Orphan['Key'],ID=Orphan['mID'])
            OrphanMemory.Put(OrphanTimeout,"Waiting")
            return None

    # This should never happen, but if it dowes, go back to waiting state
    OrphanMemory=JRRsupport.Locker(Orphan['Key'],ID=Orphan['mID'])
    OrphanMemory.Put(OrphanTimeout,"Waiting")
    return None

# Read the complete list stored on disk, if it exists

def ReadOrphanList():
    global orphanLock
    global OrphanList
    global OrphanMemory
    global OrphanListChanged
    global JRLog

    while orphanLock.Lock()!='locked':
        JRRsupport.ElasticSleep(1)

    if os.path.exists(OrphanStorehouse):
        buffer=JRRsupport.ReadFile(OrphanStorehouse)
        if buffer!=None and buffer!='':
            Orphans=buffer.split('\n')
            for Entry in Orphans:
                # Force set InMotion to False
                Entry=Entry.strip()
                if Entry=='':
                    continue
                # Break down entry and set up memory locker
                Orphan=json.loads(Entry)

                OrphanList.insert(json.dumps(Orphan))

                OrphanMemory[Orphan['Key']]=JRRsupport.Locker(Orphan['Key'])
                OrphanMemory[Orphan['Key']].Put(OrphanTimeout,"Waiting")

                OrphanListChanged=True
            JRLog.Write(f"{OrphanList.size} orphan(s) read")
    orphanLock.Unlock()

# Write only when there are changes.

def WriteOrphanList():
    global orphanLock
    global OrphanList

    orphanLock.Lock()
    buffer=''
    cur=OrphanList.GetHead()
    while cur!=None:
        buffer+=cur.GetData()+'\n'
        cur=cur.GetNext()
    JRRsupport.WriteFile(OrphanStorehouse,buffer)
    orphanLock.Unlock()

# Check the receiver file for new orders.

def ReceiveOrphans():
    global orphanLock
    global OrphanList
    global OrphanMemory
    global OrphanListChanged
    global JRLog

    # The key is the time of payload and random ID

    orphanLock.Lock()
    if os.path.exists(OrphanReceiver):
        buffer=JRRsupport.ReadFile(OrphanReceiver)
        if buffer!=None and buffer!='':
            # Remove the receiver after we load it
            os.remove(OrphanReceiver)

            # Process all the orphans

            rc=0
            Orphans=buffer.split('\n')
            for Entry in Orphans:
                if Entry.strip()=='':
                    continue

                Orphan=json.loads(Entry)
                Orphan['Key']=Orphan['DateTime']+'.'+GetID()

                OrphanList.insert(json.dumps(Orphan))

                OrphanMemory[Orphan['Key']]=JRRsupport.Locker(Orphan['Key'])
                OrphanMemory[Orphan['Key']].Put(OrphanTimeout,"Waiting")
                OrphanListChanged=True
                rc+=1
            JRLog.Write(f"{rc} orphan(s) received")
    orphanLock.Unlock()

###
### Main driver
###

def main():
    global orphanLock
    global OrphanList
    global OrphanMemory
    global OrphanListChanged
    global JRLog

    JRLog.Write('OliverTwist '+Version)

    # Establish the process pool to handle the orphans
    multiprocessing.set_start_method("spawn")
    ProcessPool=multiprocessing.Pool(processes=multiprocessing.cpu_count()*2,maxtasksperchild=73)

    # Load saved orphans into memory
    ReadOrphanList()

    cur=None
    while True:
        # Check for new orphans
        ReceiveOrphans()

        # Walk the list of orphans one by one.
        if cur==None:
            cur=OrphanList.GetHead()

        if cur==None:
            # Brief rest to maintain control over server
            JRRsupport.ElasticSleep(1)
            continue

        data=json.loads(cur.GetData())

        orphanLock.Lock()
        sData=json.loads(OrphanMemory[data['Key']].Get())
        orphanLock.Unlock()

        if 'DataStore' in sData:
            status=sData['DataStore'].lower()
        else:
            status=sData['Status'].lower()

        #if cur.GetPrev()==None:
        #    JRLog.Write(f"{data['Key']}: {sData}")

        # This check must contain all possible expected values.

        if status!='delete':
            if status=='done' \
            or status=='notfound' \
            or status=='notowner' \
            or status=='waiting':
                status='waiting'
            else:
                JRLog.Error("Corruption",f"{data['Key']}: {sData}")

        if status=='delete':

            # This is the ONLY way to properly handle deletions that
            # won't risk trashing memory, as this part of the program is
            # huarenteed to be non-parrellel. The next pointer must be
            # fetched BEFORE this orphan is removed to maintain the list
            # scan integrity.

            orphanLock.Lock()
            # Get next orphan
            cNext=cur.GetNext()
            # Remove THIS orphan
            OrphanMemory[data['Key']].Erase()
            OrphanMemory.pop(data['Key'],None)
            OrphanList.delete(cur.GetData())
            # Set the next orphan
            cur=cNext
            OrphanListChanged=True
            orphanLock.Unlock()

            JRLog.Write(f"Unorphaned: {data['Key']}")
        else:
            orphanLock.Lock()

            # Only run if not already running. It is possible for this state to
            # occur, especially if there are only a few orders to process or a
            # very fast broker.

            # ID *MUST* be dynamic for security. Howver, the child process has
            # to have it in order to access the data store. orphan lock and
            # orphan memory IDs will be different.

            if status=='waiting':
                data['lID']=orphanLock.ID
                data['mID']=OrphanMemory[data['Key']].ID
                OrphanMemory[data['Key']].Put(OrphanTimeout,"Running")
                ProcessPool.apply_async(ProcessOrphan,args=(data,),callback=OrphanUpdate)

            cur=cur.GetNext()
            orphanLock.Unlock()

        # Save the orphan list to disk, ONLY IF it actually changed

        if OrphanListChanged==True:
            orphanLock.Lock()
            WriteOrphanList()
            OrphanListChanged=False
            orphanLock.Unlock()

        # Brief rest to maintain control over server
        JRRsupport.ElasticSleep(1)

if __name__ == '__main__':
    main()
