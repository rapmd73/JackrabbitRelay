#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# CCXT PlaceOrder

# Jackrabbit Relay
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

# Even though every framework can be tested in a single PlaceOrder process, its
# simply too overbloated and unneccessarily complicated. The server core already
# allows and perfers each exchange to have is own tailored PlaceOrder
# functionality. Each PlaceOrder should be optimized according to these benifits
# and should be considered time/mission critical.

import sys
sys.path.append('/home/JackrabbitRelay2/Base/Library')
import os

import JackrabbitRelay as JRR

# Figure out the PCT type. Needs to identify %B and B%, %Q and Q%
# Default is previous functionality

def GetPCTtype(currency):
    c=currency.lower().replace(' ','')
    if 'b%' in c or '%b' in c:
        vs=c.replace('b%','').replace('%b','').strip()
        PCTtype='B'
        pct=float(vs)
    elif 'q%' in c or '%q' in c:
        vs=c.replace('q%','').replace('%q','').strip()
        PCTtype='Q'
        pct=float(vs)
    else:
        vs=c.replace('%','').strip()
        PCTtype='B'
        pct=float(vs)
    return pct,PCTtype

def GetPCTvalue(pct,close,bal):
    volume=round(((pct/100)*bal),8)
    amount=round(volume/close,8)

    return amount,volume

def GetPCTamount(relay,currency,quote):
    fn=relay.DataDirectory+'/'+relay.Exchange+'.'+relay.Account+'.PCTtable'
    PCTtable=JRRsupport.TimedList("PCTtable",fn,Log=relay.JRLog)
    if relay.Order['Action']`=='close':
        expire=0
    else:
        expire=(3650*86400)

    if "OverridePCTtable" not in relay.Active and "OverridePCTtable" not in relay.Order:
        bal=relay.GetBalance(base=quote)
        pct,PCTtype=GetPCTtype(Order[currency])
        amount,volume=GetPCTvalue(pct,ticker['Ask'],bal)

        pctData={}
        pctData['PCT']=pct
        pctData['Type']=PCTtype
        pctData['Volume']=volume
        pctData['Amount']=amount
        results=PCTtable.update(relay.Order['Asset'],json.dumps(pctData),expire)
        amount=json.loads(results['Payload'])['Amoumt']
    else:
        bal=relay.GetBalance(quote)
        amount=round(((float(relay.Order[currency].replace('%',''))/100)*bal)/ticker['Ask'],8)
    return amount

###
### Main code base. Place order on exchange
###

def main():
    relay=JRR.JackrabbitRelay(None,sys.stdin.read())

    # If we made it this far, give our header

    relay.JRLog.Write('PlaceOrder '+relay.Version)

    # Now lets get down to business. The processed order is in:
    #    relay.Order

    relay.JRLog.Write('Order parsed')
    for detail in relay.Order:
        # Do NOT display identity
        if detail=='Identity':
            continue
        relay.JRLog.Write(f'|- {detail}: {relay.Order[detail]}')

    # Check for order type override

    if "OrderTypeOverride" in relay.Active:
        relay.Order['OrderType']=relay.Active['OrderTypeOverride'].lower()

    # Check to see if we need to remap a tradingview symbol to The Exchange symbol

    if "RemapSymbol" in relay.Active or "RemapSymbol" in relay.Order:
        relay.TradingViewRemap()

    ticker=relay.GetTicker(symbol=relay.Order['Asset'])

    # Check the spreads

    if 'SpreadOverride' in relay.Active:
        if ticker['Spread']>float(relay.Active['SpreadOverride']):
            s=f"too large, {spread:.8f} > {relay.Active['SpreadOverride']:.8f}"
            relay.JRLog.Error("Spread", s)
    if 'Spread' in relay.Order:
        if ticker['Spread']>float(relay.Order['Spread']):
            s=f"too large, {spread:.8f} > {relay.Active['SpreadOverride']:.8f}"
            relay.JRLog.Error("Spread", s)

    # Check for maximum allowed assets

    if not "OverrideMaxAssets" in relay.Order:
        if "MaxAssets" in relay.Active:
            fn=relay.DataDirectory+'/'+relay.Exchange+'.'+relay.Account+'.MaxAssets'
            maxAssetsList=JRRsupport.TimedList("MaxAssets",fn,maxsize=int(relay.Active['MaxAssets']),Log=relay.JRLog)
            if relay.Order['Action']`=='close':
                expire=0
            else:
                expire=(7*86400)
            results=maxAssetsList.update(relay.Order['Asset'],json.dumps(relay.Order),expire)

    # Get Minimum allowed amount (units) and cost

    isMinimum=False
    minimum,mincost=relay.GetMinimum(symbol=relay.Order['Asset'])

    # Handle various currencies and verifications

    base=relay.Markets[relay.Order['Asset']]['base'].upper()
    quote=relay.Markets[relay.Order['Asset']]['quote'].upper()

    hasUSD=False
    hasBase=False
    hasQuote=False

    # Begin breaking down different components of the order

    if "USD" in relay.Order:
        hasUSD=True

    if "Base" in relay.Order:
        hasBase=True

    if "Quote" in relay.Order:
        hasQuote=True

    # Quick sanity check to optimize preformance

    if quote=='USD' and hasQuote:
        hBase=False
        hasQuote=False
        hasUSD=True

    # Verify on one currency type for the amount.

    if (hasUSD and hasBase) or (hasUSD and hasQuote) or (hasQuote and hasBase):
        relay.JRLog.Error("Quote validation","USD, Base, or Quote can be present, NOT a combination of two or more.")
    elif hasUSD and '%' in Order['USD']:
        relay.JRLog.Write('|- Using USD %')
    elif hasUSD and float(Order['USD'])>0.0:
        relay.JRLog.Write('|- Using USD')
    elif hasQuote and '%' in Order['Quote']:
        relay.JRLog.Write('|- Using Quote %')
    elif hasQuote and float(Order['Quote'])>0.0:
        relay.JRLog.Write('|- Using Quote')
    elif hasBase and float(Order['Base'])>0.0:
        relay.JRLog.Write('|- Using Base')

    # Figure limit order pricing, minimum cost is ignored as limit orders can be
    # anything.

    if 'limit' in relay.Order['OrderType']:
        if 'Price' in relay.Order:
            o=relay.Order['Price'].lower()
            if o=='bid':
                price=round(float(ticker['Bid']),8)
            elif o=='ask':
                price=round(float(ticker['Ask']),8)
            else:
                price=round(float(relay.Order['Price']),8)
        else:
            price=round(ticker['Ask'],8)
    elif 'market' in relay.Order['OrderType']:
        # No amount method so using exchange minimum
        if (not hasUSD and not hasBase and not hasQuote):
            isMinimum=True
            amount=minimum
            price=mincost
            relay.JRLog.Write('Using minimum position amount/price')
            relay.JRLog.Write(f'|- Minimum Amount: {minimum:.8f}')
            relay.JRLog.Write(f'|- Minimum Cost:   {mincost:.8f}')
        else:
            # Figure out percentages. AMOUNT or VOLUME to buy/sell

            if not isMinimum:
                price=ticker['Ask']
                if hasUSD:
                    if '%' in Order['USD']:
                        amount=GetPCTamount(relay,'USD',quote)
                    else:
                        amount=round(float(relay.Order['USD'])/price,8)
                elif hasQuote:
                    if '%' in Order['Quote']:
                        amount=GetPCTamount(relay,'Quote',quote)
                    else:
                        amount=round(float(relay.Order['Quote'])/price,8)
                else: # hasBase
                    if '%' in Order['Base']:
                        amount=GetPCTamount(relay,'Base',base)
                    else:
                        amount=round(float(relay.Order['Base']),8)

                # Make sure minimum is enforced.
                # KuCoin sub accounts do NOT verify or report correctly on this.
                if amount<minimum:
                    amount=minimum
    else:
        relay.JRLog.Error("PlaceOrder", "OrderType must be limit or market")

    # Get Previous Balance

    # For CCXT, colon (:) denotes a non-Spot market (Futures).

    # Should follow Version 1 and separate spot/future market to individual
    # PlaceOrder programs.

#    if ':' in relay.Order['Asset']:
#        pBalace=relay.GetPositions(symbol=relay.Order['Asset'])
#    else:
    pBalance=relay.GetBalance(Base=base)
    relay.JRLog.Write(f"Previous Balance: {bal:.8f} {base}")

# If the amount is less then the minimum and action is to sell/close

    if pBalance<mincost and (relay.Order['Action']=='close' or relay.Order['Action']=='sell'):
        relay.JRLog.Error(relay.Exchange, "not enough to sell/close position")

# Test to see if amount is more than balance and correct in needed

    if ((relay.Order['Action']=='close' or relay.Order['Action']=='sell') \
    and (amount>pBalance and pBalance>0)) or (relay.Order['Action']=='close'):
        relay.JRLog.Write("|- Forcing balance")
        amount=pBalance

# Determine trade action and carry it out

    total=round(amount*price,8)
    relay.JRLog.Write("Placing Order")
    relay.JRLog.Write(f"|- Asset: {relay.Order['Asset']}")
    relay.JRLog.Write(f"|- Action: {relay.Order['Action']}")
    relay.JRLog.Write(f"|- Amount: {amount:.8f}")
    relay.JRLog.Write(f"|- Price: {price:.8f}")
    relay.JRLog.Write(f"|- Total: {total`:.8f}")

    try: # Isolated or Crossed
        if "set_margin_mode" in relay.Broker and "Margin" in relay.Order:
            relay.Broker.set_margin_mode(relay.Order['Asset'],relay.Order['Margin'].upper())
            relay.JRLog.Write("|- Margin: "+Order['Margin'])
    except:
        pass

    try:
        if "Reduction" in relay.Active and relay.Order['Action']!="buy" and amount>=pBalance:
            pct=relay.Active['Reduction']
            r=(amount*pct)
            relay.JRLog.Write("|- Reduction: "+str(r))
            amount-=r
    except:
        pass

    if relay.Order['Action']=='close':
        relay.Order['Action']='sell'

# In spot markets, ReduceOnly is ALWAYS false

    if amount>0:
        order=relay.PlaceOrder(pair=relay.Order['Asset'], \
            orderType=relay.Order['OrderType'], \
            action=relay.Order['Action'], \
            amount=amount, \
            price=price, \
            ReduceOnly=False, \
            LedgerNote=relay.Order['LedgerNote'])

        nBalance=relay.GetBalance(Base=base)
        relay.JRLog.Write(f"New Balance: {nBalance:.8f} {base}")
    else: # logic fault, should never happen
        relay.JRLog.Error(relay.Exchange, "can not buy/sell nothing")

    # Close out the program with the elapsed time it ran

    relay.JRLog.Elapsed()

if __name__ == '__main__':
    main()
