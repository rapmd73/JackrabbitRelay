# Detect a Tri-Star Doji pattern (three consecutive Dojis)
def TriStarDoji(self,OpenIDX=1,HighIDX=2,LowIDX=3,CloseIDX=4,
                threshold1=0.1,threshold2=0.1,threshold3=0.1):

    # If not enough candles, fill with None
    if len(self.window) < 3:
        self.AddColumn(None)  # doji1
        self.AddColumn(None)  # doji2
        self.AddColumn(None)  # doji3
        self.AddColumn(None)  # is Tri-Star (1=yes)
        return self.window

    # Get last 3 rows
    row1 = self.window[-3]
    row2 = self.window[-2]
    row3 = self.window[-1]

    # Extract OHLC for each row
    o1,h1,l1,c1 = row1[OpenIDX],row1[HighIDX],row1[LowIDX],row1[CloseIDX]
    o2,h2,l2,c2 = row2[OpenIDX],row2[HighIDX],row2[LowIDX],row2[CloseIDX]
    o3,h3,l3,c3 = row3[OpenIDX],row3[HighIDX],row3[LowIDX],row3[CloseIDX]

    # --- Candle 1 ---
    b1 = abs(o1-c1)
    r1 = h1-l1
    ratio1 = b1/r1 if r1!=0 else 0
    doji1 = 1 if ratio1 <= threshold1 else 0

    # --- Candle 2 ---
    b2 = abs(o2-c2)
    r2 = h2-l2
    ratio2 = b2/r2 if r2!=0 else 0
    doji2 = 1 if ratio2 <= threshold2 else 0

    # --- Candle 3 ---
    b3 = abs(o3-c3)
    r3 = h3-l3
    ratio3 = b3/r3 if r3!=0 else 0
    doji3 = 1 if ratio3 <= threshold3 else 0

    # Tri-Star requires all 3 to be Doji
    isTriStar = 1 if (doji1==1 and doji2==1 and doji3==1) else 0

    # Add results to output
    self.AddColumn(doji1)
    self.AddColumn(doji2)
    self.AddColumn(doji3)
    self.AddColumn(isTriStar)

    return self.window

