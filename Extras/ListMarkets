#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
sys.path.append('/home/JackrabbitRelay/Base/Library')
import ccxt

import JRRconfig
import JRRsupport
import JRRapi
import JRRlog

def main():
    if len(sys.argv) > 2:
        exchangeName=sys.argv[1].lower()
        market=sys.argv[2].lower()
    else:
        print("One of the following Exchanges must be given, followed by a market type (spot, future). \n\nExchanges: ",str(ccxt.exchanges))
        sys.exit(1)

    RetryLimit=3
    RateLimit=1000
    srch=None
    if len(sys.argv) > 3:
        RateLimit=int(sys.argv[3])
    if len(sys.argv) > 4:
        srch=sys.argv[4].upper()
    if len(sys.argv) > 5:
        srchLT=True
        sLT=float(sys.argv[5])
    else:
        srchLT=False
    if len(sys.argv) > 6:
        srchGT=True
        sGT=float(sys.argv[6])
    else:
        srchGT=False

    if exchangeName in ccxt.exchanges:
        exchange=getattr(ccxt,exchangeName)()
    else:
        if exchangeName=="ftxus":
            exchange=ccxt.ftx({'hostname': 'ftx.us'})
        else:
            print("Invalid exchange")
            sys.exit(1)

    exchange.enableRateLimit=True
    exchange.rateLimit=RateLimit

    done=False
    c=0
    while not done:
        try:
            exchange.load_markets()
            done=True
        except:
            if c>4:
                JRRlog.ErrorLog("Fetching Market","retries failed")
            c+=1
            JRRsupport.ElasticSleep(1)
            pass

    for pair in exchange.markets:
        if pair[0]=='.' or pair.find(".d")>-1:
            continue
        if 'active' in exchange.markets[pair]:
            if exchange.markets[pair]['active']==False:
                continue

        if srch!=None and srch!='ALL':
            if pair.find(srch)<0:
                continue

        try:
            ticker=exchange.fetchTicker(pair)
        except Exception as e:
            JRRlog.ErrorLog("Fetching Ticker",e)

        if ticker['info']!=None and "type" in ticker['info']:
            marketType=ticker['info']['type']
        else:
            if "type" in exchange.markets[pair]:
                if "type" in exchange.markets[pair]['info']:
                    if exchange.markets[pair]['info']['type']==exchange.markets[pair]['type']:
                        marketType=exchange.markets[pair]['type']
                    else:
                        marketType=exchange.markets[pair]['info']['type']
            else:
                if "permissions" in exchange.markets[pair]['info']:
                    marketType=' '.join(exchange.markets[pair]['info']['permissions'])
                else:
                    marketType="spot"

        if market.lower()!='all':
            if marketType!=market:
                continue

# Get exchange required minimums

        quote=exchange.markets[pair]['quote']
        base=exchange.markets[pair]['base']

        if quote not in JRRconfig.StableCoinUSD:
            forceQuote=True
        else:
            forceQuote=False

        minimum,mincost=JRRapi.GetMinimum(exchange,pair,forceQuote,False,RetryLimit)

        if srchLT:
            if mincost>sLT:
                continue
        if srchGT:
            if mincost<sGT:
                continue

        print(f"{pair:20} {marketType:15} {minimum:18.6f} {mincost:18.6f}")

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Terminated")
