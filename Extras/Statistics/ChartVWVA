#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit Relay
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

# Volumw Weighted Volatility Analysis

import sys
sys.path.append('/home/JackrabbitRelay/Base/Library')
import ccxt
import datetime

import plotly.express as px
import plotly.graph_objects as go
import plotly.subplots as ps
import TechnicalAnalysis as ta

import JRRconfig
import JRRsupport
import JRRapi
import JRRlog

def main():
    if len(sys.argv) > 2:
        exchangeName=sys.argv[1].lower()
        account=sys.argv[2]
        pair=sys.argv[3].upper()
    else:
        print("An exchange, an asset, and a balance file must be provided.")
        sys.exit(1)

    RetryLimit=3
    RateLimit=1000

    if exchangeName in ccxt.exchanges:
        exchange=getattr(ccxt,exchangeName)()
    else:
        if exchangeName=="ftxus":
            exchange=ccxt.ftx({'hostname': 'ftx.us'})
        else:
            print("Invalid exchange")
            sys.exit(1)

    exchange.enableRateLimit=True
    exchange.rateLimit=RateLimit

    done=False
    c=0
    while not done:
        try:
            markets=exchange.load_markets()
            done=True
        except:
            if c>4:
                print("Fetching Market","retries failed")
                sys.exit(1)
            c+=1
            JRRsupport.ElasticSleep(1)
            pass

    if not pair in exchange.markets:
        print(pair+" is not active on this exchange")
        sys.exit(1)

    if 'active' in exchange.markets[pair]:
        if exchange.markets[pair]['active']==False:
            print(pair+" is not active on this exchange")
            sys.exit(1)

    candles=JRRapi.FetchCandles(exchange,pair,'1d',398,RetryLimit)

    # Must havwe 1 year and 31 days of data for a valid analysis

    l=len(candles)
    if l<90:
        print(f"{pair}: Not enough data for analysis")
        sys.exit(1)

    dtList=[]

    vwp1List=[]
    vwp3List=[]
    vwp7List=[]
    vwp31List=[]

    v1List=[]
    v3List=[]
    v7List=[]
    v31List=[]

    ohlc={}
    ohlc['Open']=[]
    ohlc['High']=[]
    ohlc['Low']=[]
    ohlc['Close']=[]
    ohlc['Text']=[]

    for i in range(32,l-1):
        t=float(candles[i-1][0])/1000
        timestamp=datetime.datetime.fromtimestamp(t)
        dt=timestamp.strftime('%Y-%m-%d')

        o=round(candles[i-1][1],8)
        h=round(candles[i-1][2],8)
        l=round(candles[i-1][3],8)
        c=round(candles[i-1][4],8)

        strblock="Date: "+dt+"<br>Open: "+str(o)+"<br>High: "+str(h)+"<br>Low: "+str(l)+"<br>Close: "+str(c)

        ohlc['Open'].append(o)
        ohlc['High'].append(h)
        ohlc['Low'].append(l)
        ohlc['Close'].append(c)
        ohlc['Text'].append(strblock)

        vwp1=0.0
        for x in range(1,5):
            vwp1+=candles[i-1][x]
        vwp1/=4

        vwp3=ta.VWAP(candles[i-4:i],3)
        vwp7=ta.VWAP(candles[i-8:i],7)
        vwp31=ta.VWAP(candles[i-32:i],31)

        vwp1List.append(vwp1)
        vwp3List.append(vwp3)
        vwp7List.append(vwp7)
        vwp31List.append(vwp31)

        # 1 day volatility
        c0=candles[i-1][4]
        c1=candles[i-2][4]
        v1=abs((c0/c1-1)*100)

        v3=ta.Volatility(candles[i-4:i],3)
        v7=ta.Volatility(candles[i-8:i],7)
        v31=ta.Volatility(candles[i-32:i],31)

        dtList.append(dt)

        v1List.append(v1)
        v3List.append(v3)
        v7List.append(v7)
        v31List.append(v31)

#
# Make the chart
#

    f=pair.find('/')
    p=pair.replace(':','').replace('-','').replace('/','')
    fn=JRRconfig.ChartsDirectory+'/'+exchangeName+'.'+account+'.'+p[:f]+'.vwva.html'

    ts=pair.upper()+' Volume Weighted Average Price/Volatility ('+exchangeName.capitalize()+')'

    fig1=ps.make_subplots(specs=[[{"secondary_y":True}]])

    fig1.add_trace(go.Candlestick(x=dtList,open=ohlc['Open'],high=ohlc['High'],low=ohlc['Low'],close=ohlc['Close'],opacity=0.75,name='OHLC',text=ohlc['Text'],hoverinfo='text'),secondary_y=False)

    fig1.add_trace(go.Scatter(x=dtList,y=vwp1List,name='1 Day VWAP'),secondary_y=False)
    fig1.add_trace(go.Scatter(x=dtList,y=v1List,opacity=0.3,name='1 Day Volatility'),secondary_y=True)

    fig1.add_trace(go.Scatter(x=dtList,y=vwp3List,name='3 Day VWAP'),secondary_y=False)
    fig1.add_trace(go.Scatter(x=dtList,y=v3List,opacity=0.3,name='3 Day Volatility'),secondary_y=True)

    fig1.add_trace(go.Scatter(x=dtList,y=vwp7List,name='7 Day VWAP'),secondary_y=False)
    fig1.add_trace(go.Scatter(x=dtList,y=v7List,opacity=0.3,name='7 Day Volatility'),secondary_y=True)

    fig1.add_trace(go.Scatter(x=dtList,y=vwp31List,name='31 Day VWAP'),secondary_y=False)
    fig1.add_trace(go.Scatter(x=dtList,y=v31List,opacity=0.3,name='31 Day Volatility'),secondary_y=True)

    fig1.update_yaxes(title_text='Volume Weighted Average Price',secondary_y=False)
    fig1.update_yaxes(title_text='Volatility (%)',secondary_y=True)

    fig1.update_layout(title={"text":ts,"x":0.5,"xanchor":"center","yanchor":"top"},template='plotly_white',
        updatemenus=[go.layout.Updatemenu(
            active=0,
            buttons=list(
                [dict(label = 'All',
                      method = 'update',
                      args = [{'visible': [True, True, True, True, True, True, True, True, True]},
                              {'showlegend':True}]),
                 dict(label = 'OHLC',
                      method = 'update',
                      args = [{'visible': [True, False, False, False, False, False, False, False, False]},
                              {'showlegend':True}]),
                 dict(label = '1 Day',
                      method = 'update',
                      args = [{'visible': [True, True, True, False, False, False, False, False, False]},
                              {'showlegend':True}]),
                 dict(label = '3 Day',
                      method = 'update',
                      args = [{'visible': [True, False, False, True, True, False, False, False, False]},
                              {'showlegend':True}]),
                 dict(label = '7 Day',
                      method = 'update',
                      args = [{'visible': [True, False, False, False, False, True, True, False, False]},
                              {'showlegend':True}]),
                 dict(label = '31 Day',
                      method = 'update',
                      args = [{'visible': [True, False, False, False, False, False, False, True, True]},
                              {'showlegend':True}]),]))])

    fig1.write_html(fn)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Terminated")
