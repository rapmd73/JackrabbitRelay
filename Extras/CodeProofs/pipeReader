#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit Relay
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

import sys
sys.path.append('/home/GitHub/JackrabbitRelay/Base/Library')
import os
import json
import time
import random
import multiprocessing
import subprocess

import JRRsupport

pipeWriter='/home/GitHub/JackrabbitRelay/Extras/CodeProofs/pipeWriter'
words=JRRsupport.ReadFile('wordlist').split('\n')

# Global lock required to prevent memory from being destroyed during asychonrous
# activity.

gLock=JRRsupport.Locker("pipeReader")

def GetID():
    letters="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    llen=len(letters)

    pw=""
    oc=""

    for i in range(20):
        done=False
        while not done:
            for z in range(random.randrange(73,237)):
                c=random.randrange(llen)
            if pw=="" or (len(pw)>0 and letters[c]!=oc):
                done=True
        oc=letters[c]
        pw+=oc
    return pw

def compareCounter(node,dz):
    nData=node.GetData()

    d2=str(json.loads(nData)['ID'])
    d1=str(json.loads(dz)['ID'])

    if d1<d2:
        r=-1
    elif d1>d2:
        r=1
    else:
        r=0
    return r

def ProcessResults(result):
    # Locking required to protect memory structures

    gLock.Lock()

    # At this stage, pData should NEVER be None or undefined. If it is, then
    # memory was thrashed.

    # Find entry in list by ID
    pData=pList.find(json.dumps(result))
    if pData!=None:
        # Get original list entry
        pd=json.loads(pData.GetData())
        # Add data element to original entry
        pd['Result']=result['Result']
        # Update the original list with new data
        pData.SetData(json.dumps(pd))
    gLock.Unlock()

def ProcessWords(result):
    w=random.randrange(len(words))

    # Locking required to protect memory structures
    gLock.Lock()

    pData=pList.find(json.dumps(result))
    if pData!=None:
        # Load original
        pd=json.loads(pData.GetData())
        # Add additional data
        pd['Word']=words[w]
        pData.SetData(json.dumps(pd))
    gLock.Unlock()

def ProcessData(data,id):
    transactor=[ pipeWriter ]
    subp=subprocess.Popen(transactor,stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    subp.stdin.write(data.encode())
    res=subp.communicate()[0].decode().strip()

    pData={}
    pData['ID']=id
    pData['Result']=res
    return pData

# Must be global, but after compare function declared.

pList=JRRsupport.DList(Compare=compareCounter)

def main():
    cMax=10
    if len(sys.argv)>1:
        cMax=int(sys.argv[1])

    ProcessPool=multiprocessing.Pool(processes=multiprocessing.cpu_count()*2,maxtasksperchild=237)

    try:
        counter=0
        while counter<cMax:
            data=str(counter)
            pData={}
            pData['Counter']=data
            pData['ID']=GetID()

            # Lock required to stop memory thrashing

            gLock.Lock()
            pList.insert(json.dumps(pData))
            gLock.Unlock()

            ProcessPool.apply_async(ProcessData,args=(data,pData['ID'],),callback=ProcessResults)
            ProcessPool.apply_async(ProcessData,args=(data,pData['ID'],),callback=ProcessWords)
            counter+=1
    except:
        # Clean up and shutdown
        ProcessPool.close()
        ProcessPool.join()

    # Show the list be just built

    cur=pList.GetHead()
    while cur!=None:
        print(cur.GetData())
        cur=cur.GetNext()

if __name__=='__main__':
    try:
        main()
    except:
        gLock.Unlock()

