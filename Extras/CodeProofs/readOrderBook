#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit Relay
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

import sys
sys.path.append('/home/GitHub/JackrabbitRelay/Base/Library')
import os
import json

import JackrabbitRelay as JRR

Blank=" "

###
### Main code base. Place order on exchange
###

relay=JRR.JackrabbitRelay()
if relay.GetArgsLen()>4:
    exchangeName=relay.GetExchange()
    account=relay.GetAccount()
    asset=relay.GetAsset()
    depth=int(relay.GetArgs(4))
else:
    print("An exchange, (sub)account, an asset, and depth must be provided.")
    sys.exit(1)

markets=relay.GetMarkets()
ticker=relay.GetTicker(symbol=asset)
orderbook=relay.GetOrderBook(symbol=asset)

if relay.GetFramework()=='ccxt':
    BuyPrice=round(float(ticker['Ask']),8)
    SellPrice=round(float(ticker['Bid']),8)

    # Variables for order book

    lp=0
    sp=0
    buyIDX=0
    sellIDX=0
    l=min(len(orderbook['asks']),len(orderbook['bids']))-1

    obl=[]
    oblB=[]
    oblS=[]

    # This table denotes the order book prices by volume. Prices are rounded to pips.
    # 0 price
    # 1 volume at given price
    # 2 count
    # 3 depth of market

    BuyTable=[]

    idx=0
    ppB=0
    ppS=0
    for ob in range(l):
        bprice=round(orderbook['bids'][ob][0],8)
        buy=orderbook['bids'][ob][1] #*bprice

        sprice=round(orderbook['asks'][ob][0],8)
        sell=orderbook['asks'][ob][1] #*sprice

        cpB=bprice
        if ppB<BuyPrice and BuyPrice<=cpB:
            buyIDX=idx

        cpS=sprice
        if ppS<SellPrice and SellPrice<=cpS:
            sellIDX=idx

        lp+=buy
        sp+=sell

        oblB.append([buy,bprice])
        oblS.append([sell,sprice])
        ppB=cpB
        ppS=cpS
        idx+=1

    print(f"{Blank:4} {'Volume':>12} {'Buy':>12} {'Sell':>12} {'Volume':>12} {'Spread':>12}")
    print(f"{Blank:4} {Blank:12} {BuyPrice:12.5f} {SellPrice:12.5f} {Blank:12} {BuyPrice-SellPrice:12.5f}")
    print(f"{'-'*4:4} {'-'*12:12} {'-'*12:12} {'-'*12:12} {'-'*12:12} {'-'*12:12}")

    c=1
    maxBorders=0
    maxSorders=0
    maxBprice=0
    maxSprice=0
    for i in range(depth):
        buy=oblB[buyIDX+i][0]
        bprice=oblB[buyIDX+i][1]

        sprice=oblS[sellIDX+i][1]
        sell=oblS[sellIDX+i][0]

        spread=sprice-bprice

        if buy>maxBorders:
            maxBorders=buy
            maxBprice=bprice
        if sell>maxSorders:
            maxSorders=sell
            maxSprice=sprice
        print(f"{c:4} {buy:12.5f} {bprice:12.5f} {sprice:12.5f} {sell:12.5f} {spread:12.5f}")
        c+=1

    spread=maxSprice-maxBprice
    print(f"{'-'*4:4} {'-'*12:12} {'-'*12:12} {'-'*12:12} {'-'*12:12} {'-'*12:12}")
    print(f"MAX  {maxBorders:12.5f} {maxBprice:12.5f} {spread:12.5f} {maxSprice:12.5f} {maxSorders:12.5f}")
elif relay.GetFramework()=='oanda':
    BuyPrice=ticker['Bid']
    SellPrice=ticker['Ask']

    # Get order book

    lp=0
    sp=0
    l=len(orderbook)
    buyIDX=0
    sellIDX=0

    obl=[]
    pp=0
    idx=0
    for cur in orderbook:
        buy=(float(cur['longCountPercent'])/100)*l
        price=round(float(cur['price']),4)
        sell=(float(cur['shortCountPercent'])/100)*l

        cp=price
        if pp<BuyPrice and BuyPrice<=cp:
            buyIDX=idx-1
        if pp<SellPrice and SellPrice<=cp:
            sellIDX=idx

        lp+=buy
        sp+=sell

        obl.append([buy,price,sell])
        pp=cp
        idx+=1

    print(f"{Blank:3} {'Volume':>12} {'Buy':>12} {'Sell':>12} {'Volume':>12} {'Spread':>12}")
    print(f"{Blank:3} {Blank:12} {BuyPrice:12.5f} {SellPrice:12.5f} {Blank:12} {BuyPrice-SellPrice:12.5f}")
    print(f"{'-'*3:3} {'-'*12:12} {'-'*12:12} {'-'*12:12} {'-'*12:12} {'-'*12:12}")

    c=1
    maxBorders=0
    maxSorders=0
    maxBprice=0
    maxSprice=0
    for i in range(depth):
        buy=obl[buyIDX-i][0]
        bprice=obl[buyIDX-i][1]
        sprice=obl[sellIDX+i][1]
        sell=obl[sellIDX+i][2]
        spread=sprice-bprice
        if buy>maxBorders:
            maxBorders=buy
            maxBprice=bprice
        if sell>maxSorders:
            maxSorders=sell
            maxSprice=sprice
        print(f"{c:3} {buy:12.5f} {bprice:12.5f} {sprice:12.5f} {sell:12.5f} {spread:12.5f}")
        c+=1

    spread=maxSprice-maxBprice
    print(f"{'-'*3:3} {'-'*12:12} {'-'*12:12} {'-'*12:12} {'-'*12:12} {'-'*12:12}")
    print(f"MAX {maxBorders:12.5f} {maxBprice:12.5f} {maxSprice:12.5f} {maxSorders:12.5f} {spread:12.5f}")
