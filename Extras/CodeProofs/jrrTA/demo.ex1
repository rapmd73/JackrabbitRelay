#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit Relay Technical Analysis example

# 2021-2025 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

import sys
sys.path.append('/home/GitHub/JackrabbitRelay/Base/Library')
import os
import math
import json
import datetime
import time

import plotly.express as px
import plotly.graph_objects as go
import plotly.subplots as ps

import JackrabbitRelay as JRR
import JRRtechnical as jrTA

def main():
    if len(sys.argv) > 4:
        exchangeName=sys.argv[1]
        account=sys.argv[2]
        asset=sys.argv[3]
        tf=sys.argv[4]
    else:
        print("An exchange, (sub)account, an asset, and a timeframe must be provided.")
        sys.exit(1)

    TakeProfit=1/100    # 1%
    if len(sys.argv) > 5:
        TakeProfit=float(sys.argv[5])/100

    spread=0.0004
    if len(sys.argv) > 6:
        spread=float(sys.argv[6])

    ta=jrTA.TechnicalAnalysis(exchangeName,account,asset,tf,4999)
#    ohlcv=ta.GetOHLCV()
    ohlcv=ta.ReadOHLCV('EURUSD.txt')

    period=197

    units=10
    trades=[]

    Opening=1
    HighIDX=2
    LowIDX=3
    Closing=4
    Volume=5

    tpnl=0

    # Chart setup

    ChartName=f'demo.ex1'
    Title="Support/Resistance with ATR pullback boundary"
    fig1=ps.make_subplots(specs=[[{"secondary_y":False}]])

    # Prepare for loop

    dt=[]
    do=[]
    dh=[]
    dl=[]
    dc=[]

    cS=[]
    cR=[]
    pS=[]
    pR=[]

    for slice in ohlcv:
        if slice[0] is None:
            continue

        # Plot candles of timeframe just above log
        try:
            dt.append(datetime.datetime.fromtimestamp(int(float(slice[0])/1000)))
        except Exception as err:
            dt.append(slice[0])

        do.append(slice[1])
        dh.append(slice[2])
        dl.append(slice[3])
        dc.append(slice[4])

        # Build rolling window
        ta.Rolling(slice)

        rIDX=6
        sIDX=7

        ta.Resistance(HighIDX,period)
        ta.Support(LowIDX,period)

        atrIDX=9        # 8 is tr column
        ta.ATR(HighIDX,LowIDX,Closing,14,smooth_func=ta.SMA)

        # Get the last row of the window

        row=ta.LastRow()

        # This is a way to add a trailing ATR or channel for trading. Possible
        # examples could be a buy signal with closing price crosses above
        # support. Selling signal could be closing price dropping below
        # restance.

        # add/subtract ATR from high low. This looks for a pullback effect.

        h=l=None
        if row[rIDX] is not None and row[sIDX] is not None and row[atrIDX] is not None:
            h=row[rIDX]-(row[atrIDX])
            l=row[sIDX]+(row[atrIDX])

        hIDX=10
        lIDX=11

        ta.AddColumn(h)
        ta.AddColumn(l)

        # Figure out crossing for resistance, looking for under (-1)

        rcIDX=13
        ta.Cross(Closing,hIDX)

        # Figure out crossing for support, looking for over (1)

        scIDX=15
        ta.Cross(Closing,lIDX)

        # Potential signals

        row=ta.LastRow()
        if row[rcIDX]==-1 and trades!=[]:
            pnl=0
#            for t in trades:
#                m=row[Closing]-spread
#                pnl+=m-t

            avg=sum(trades)/len(trades)
            if row[Closing]>avg+(row[Closing]*TakeProfit):
                pnl=(row[Closing]-spread)-avg

                tpnl+=pnl
                print(f"{row[0]} S {row[Closing]:.8f}({len(trades)})>{avg:.8f} {pnl:.8f}");
                trades=[]
        if row[scIDX]==1:
            if len(trades)>0:   # 20 pips
                bp=trades[-1]-(trades[-1]*TakeProfit)
                if row[Closing]<bp:
                    print(f"{row[0]} B {row[Closing]:.8f}");
                    trades.append(row[Closing]+spread)
            else:
                print(f"{row[0]} B {row[Closing]:.8f}");
                trades.append(row[Closing]+spread)

        lr=ta.LastRow()
        if lr!=[] and lr[0]!=ohlcv[0][0]:
            cS.append(lr[sIDX])
            cR.append(lr[rIDX])
            pS.append(row[lIDX])
            pR.append(row[hIDX])

#        ta.Display(-1)

    print(f"{tpnl:.8f}")
    ohlcv=None
    sys.exit(0)

    # Plot and save the chart

    fig1.add_trace(go.Candlestick(x=dt,open=do,high=dh,low=dl,close=dc,increasing_line_color='#a0ffff',decreasing_line_color= '#ffa0ff',name="Candlesticks"),secondary_y=False)

    fig1.add_trace(go.Scatter(x=dt,y=cS,mode='lines',name="Support"),secondary_y=False)
    fig1.add_trace(go.Scatter(x=dt,y=cR,mode='lines',name="Resistance"),secondary_y=False)
    fig1.add_trace(go.Scatter(x=dt,y=pS,mode='lines',name="Support Pullback"),secondary_y=False)
    fig1.add_trace(go.Scatter(x=dt,y=pR,mode='lines',name="Resistance Pullback"),secondary_y=False)

    fig1.update_yaxes(title_text='Price',secondary_y=False)
    fig1.update_layout(title={"text":Title,"x":0.5,"xanchor":"center","yanchor":"top"},template='plotly_white',showlegend=True)
    fig1.update(layout_xaxis_rangeslider_visible=False)

    fig1.write_html(ChartName+'.html')
    fig1.write_image(ChartName+'.png',width=1920,height=1024)

if __name__=='__main__':
    main()

###
### End demo
###

