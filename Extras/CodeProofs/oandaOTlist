#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

import sys
sys.path.append('/home/GitHub/JackrabbitRelay/Base/Library')
import os
import json
import datetime

import JRRsupport
import JackrabbitRelay as JRR

# Directories

DataDirectory='/home/JackrabbitRelay2/Data'
chartDir=DataDirectory+'/Charts/'
Storehouse=DataDirectory+'/OliverTwist.Storehouse'

# For reading the storehouse

OliverTwistLock=JRRsupport.Locker("OliverTwist")

# Read the store house and return a list of the open orders being tracked.

def ReadStorehouse(exchange,account,asset):
    global OliverTwistLock

    OrphanList=[]

    WorkingStorehouse=Storehouse

    while OliverTwistLock.Lock()!='locked':
        JRRsupport.ElasticSleep(1)

    if os.path.exists(WorkingStorehouse):
        buffer=JRRsupport.ReadFile(WorkingStorehouse).strip()
        if buffer!=None and buffer!='':
            Orphans=buffer.split('\n')
            for Entry in Orphans:
                # Force set InMotion to False
                Entry=Entry.strip()
                if Entry=='':
                    continue
                # Break down entry and set up memory locker
                try:
                    Orphan=Entry
                    while type(Orphan)==str:
                        Orphan=json.loads(Orphan)
                except:
                    JRLog.Write(f"Broken: {Entry}")
                    continue

                if 'Order' in Orphan:
                    if type(Orphan['Order'])==str:
                        order=json.loads(Orphan['Order'])
                        order.pop('Identity',None)
                        Orphan['Order']=order
                if 'Detail' in Orphan:
                    if type(Orphan['Detail'])==str:
                        detail=json.loads(Orphan['Detail'])
                        detail.pop('Identity',None)
                        Orphan['Detail']=detail

                if Orphan['Order']['Exchange']==exchange and Orphan['Order']['Account']==account and Orphan['Order']['Asset']==asset:
                    OrphanList.append(Orphan)

    OliverTwistLock.Unlock()
    return OrphanList

###
### Main Driver
###

relay=JRR.JackrabbitRelay()
if relay.GetArgsLen() > 3:
    exchange=relay.GetExchange()
    account=relay.GetAccount()
    asset=relay.GetAsset()
else:
    print("An exchange, (sub)account, and an asset must be provided.")
    sys.exit(1)

OpenOrders=ReadStorehouse(exchange,account,asset)

StartTime=datetime.datetime.now()
for o in OpenOrders:
    if 'Price' not in o:
        print(f"{o['ID']} NO price data")
        continue

    ticker=relay.GetTicker(symbol=asset)
    if ticker['Ask']<float(o['Price'])-0.0010: # 10 pip profit
        Print(f"{o['ID']} in profit")
    else:
        print(f"{o['ID']} {abs(float(o['Price'])-ticker['Ask']):.5f} unrealized loss")

print()
EndTime=datetime.datetime.now()
print(f"Elapsed Full Sweep: {EndTime-StartTime} seconds")

print()

start=datetime.datetime.now()
hPrice=float('-inf')
lPrice=float('inf')
hTrade=None
lTrade=None

for o in OpenOrders:
    if 'Price' not in o:
        print(f"{o['ID']} NO price data")
        continue

    price=float(o['Price'])
    if price<lPrice:
        lTrade=o
        lPrice=price
    if price>hPrice:
        hTrade=o
        hPrice=price

ticker=relay.GetTicker(symbol=asset)
if ticker['Ask']<lPrice-0.0010: # 10 pip profit
    Print(f"{o['ID']} in profit")
else:
    print(f"{o['ID']} {abs(lPrice-ticker['Ask']):.5f} unrealized loss")

end=datetime.datetime.now()

print(f"Highest: {hTrade['ID']:>7} {float(hTrade['Price']):10.5f}")
print(f"Lowest:  {lTrade['ID']:>7} {float(lTrade['Price']):10.5f}")
print(f"Elapsed High/Low Sweep: {end-start} seconds")


