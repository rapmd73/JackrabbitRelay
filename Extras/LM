#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
sys.path.append('/home/JackrabbitRelay2/Base/Library')
import os
import json
import time

import JRRsupport
import JackrabbitRelay as JRR

interceptor=JRRsupport.SignalInterceptor()

def GetRatio(decimal):
    ratio = 1 / decimal
    return f"{int(ratio):4}:1"

# Example usage

def Help(args,argslen):
    print("An exchange and an account must be provided.")
    sys.exit(1)

# Get ticker and make a memory reference for it

def GetChildTicker(*args,**kwargs):
    try:
        relay=JRR.JackrabbitRelay(exchange=args[0],account=args[1],asset=args[2])
        ticker=relay.GetTicker(symbol=args[2])
        # If bid and ask are 0, we can't trade it, so don't show it.
        if ticker['Bid']==0 and ticker['Ask']==0:
            return

        minimum,mincost=relay.GetMinimum(symbol=args[2])
        ticker['minimum']=minimum
        ticker['mincost']=mincost

        id=f"{args[0]}.{args[1]}.{args[2]}"
        mid=f"{id}.memory"

        mlock=JRRsupport.Locker(id,ID=id,Timeout=10)
        mdata=JRRsupport.Locker(mid,ID=mid,Timeout=10)

        mlock.Lock()
        md=json.dumps(ticker).replace('"','\\"') # MUST be string
        mdata.Put(86400,md)
        mlock.Unlock()
    except Exception as e:
        pass

###
### MAIN driver
###

def main():
    relay=JRR.JackrabbitRelay(Usage=Help)

    exchangeName=relay.GetExchange()
    account=relay.GetAccount()

    # Already loaded from login

    markets=relay.Markets

    # Get additional command line setting

    srch='ALL'
    if relay.GetArgsLen() > 3:
        srch=relay.GetArgs(3).upper()
    if relay.GetArgsLen() > 4:
        srchLT=True
        sLT=float(relay.GetArgs(4))
    else:
        srchLT=False
    if relay.GetArgsLen() > 5:
        srchGT=True
        sGT=float(relay.GetArgs(5))
    else:
        srchGT=False

    # Begin listing this exchange/broker

    for pair in relay.Markets:
        if relay.Framework=='mimic' or relay.Framework=='ccxt':
            if pair[0]=='.' or pair.find(".d")>-1 or pair.find(" ")>-1:
                continue
            if 'active' in relay.Markets[pair]:
                if relay.Markets[pair]['active']==False:
                    continue

        if srch!=None and srch.upper()!='ALL':
            if pair.find(srch)<0:
                continue

        interceptor.StartProcess(GetChildTicker,args=[exchangeName,account,pair])

        # Control the number of children
        while interceptor.GetChildren()>os.cpu_count():
            if interceptor.GetChildren()==0:
                break
            time.sleep(1)

    # Wait for all children to complete
    while True:
        if interceptor.GetChildren()==0:
            break
        time.sleep(1)

    # Pull the completed memory records
    for pair in relay.Markets:
        if srch!=None and srch.upper()!='ALL':
            if pair.find(srch)<0:
                continue

        id=f"{exchangeName}.{account}.{pair}"
        mid=f"{id}.memory"

        mlock=JRRsupport.Locker(id,ID=id,Timeout=10)
        mdata=JRRsupport.Locker(mid,ID=mid,Timeout=10)

        mlock.Lock()
        data=json.loads(mdata.Get())
        mdata.Erase()
        mlock.Unlock()

        try:
            ticker=json.loads(data['DataStore'].replace('\\"','"'))
        except:
            continue

        if relay.Framework=='mimic' or relay.Framework=='ccxt':
            marketType=relay.Markets[pair]['type']
            if 'margin' in relay.Markets[pair] \
            and relay.Markets[pair]['margin']==True \
            and marketType=='spot':
                marketType='margin'
            id=relay.Markets[pair]['id']
            minimum=ticker['minimum']
            mincost=ticker['mincost']
            print(f"{pair:30} {id:30} {marketType:8} {minimum:18.8f} {mincost:18.8f} {ticker['Bid']:18.8f} {ticker['Spread']:18.8f} {ticker['Ask']:18.8f}")
        elif relay.Framework=='oanda':
            mr=GetRatio(float(relay.Markets[pair]['marginRate']))
            lfr=float(relay.Markets[pair]['financing']['longRate'])
            sfr=float(relay.Markets[pair]['financing']['shortRate'])
            print(f"{pair:10} {mr} {lfr:7.4f} {sfr:7.4f} {ticker['Bid']:9.5f} {ticker['Spread']:9.5f} {ticker['Ask']:9.5f}")
        else:
            print("Unrecognized framework")
            sys.exit(0)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Terminated")
