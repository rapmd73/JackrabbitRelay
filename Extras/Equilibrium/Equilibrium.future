#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit Equilibrium
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

# LONG -    buy when the price goes down
# SHORT -   buy when the price goes up

import sys
sys.path.append('/home/JackrabbitRelay/Base/Library')
import os

import JRRconfig
import JRRlog
import JRRapi
import JRRsupport

sys.path.append('/home/Equilibrium/Library')
import EqSupport

Header='Equilibrium '+JRRconfig.Version

###
### Main code base. Place order on exchange
###

def main():
    JRRlog.WriteLog(Header)

    # Read CFG file
    if len(sys.argv) > 1:
        Config=EqSupport.ReadConfig(sys.argv[1])
    else:
        print("A valid configuration file must be provided.")
        sys.exit(1)

    paper=False
    if 'Paper' in Config:
        paper=True

    exchangeName=Config['Exchange']
    account=Config['Account']
    pair=Config['Asset']
    pct=Config['Boundary']
    orderType=Config['OrderType']

# Figure out the direction of the trade

    if 'Direction' not in Config:
        JRRlog.ErrorLog("Equilibrium","A direction of long or short MUST be present")

    direction=Config['Direction'].lower()
    if direction!='long' and direction!='short':
        JRRlog.ErrorLog("Equilibrium","Direction MUST be long or short")
    direction=Config['Direction'].lower()

# Theory:
#
# Long direction trading:
#       Buy when price is below boundary.   API: long
#       Sell when price is above boundary.  API: short
#
# Short direction trading:
#       Buy when price is above boundary.   API: short
#       Sell when price is below boundary.  API: long
#
# Realization: PCT value needs to be set to ATH like long positions.
#              Defensiveness is needed to stop excess accumulation.

    if direction=='long':
        BuyDir='long'
        SellDir='short'
    else:
        BuyDir='short'
        SellDir='long'
        AllTimeHigh=0.0

    keys=JRRsupport.ReadConfig(exchangeName,account)
    JRRlog.WriteLog("API(s)/Secret(s) loaded for "+exchangeName+", (sub)account: "+account)

    CurrentKey=(os.getpid()%len(keys))
    Active=keys[CurrentKey]

    exchange=JRRapi.ExchangeLogin(exchangeName,Active)

    if "Retry" in Active:
        RetryLimit=int(Active['Retry'])
        JRRlog.WriteLog("|- API Retry limit set to "+str(RetryLimit)+' times')
    else:
        RetryLimit=10

    if not "Webhook" in Active:
        JRRlog.ErrorLog("Equilibrium","Webhook NOT present")

    markets=JRRapi.GetMarkets(exchange,pair,RetryLimit)

# This is where a looping method would go if this were to serve a single exchange
# with multiple pairs.

# Get asset information

    base=exchange.markets[pair]['base']
    quote=exchange.markets[pair]['quote']

    marketType="future"
    if "type" in exchange.markets[pair]:
        if "type" in exchange.markets[pair]['info']:
            if exchange.markets[pair]['info']['type']==exchange.markets[pair]['type']:
                marketType=exchange.markets[pair]['type']
            else:
                marketType=exchange.markets[pair]['info']['type']

    JRRlog.WriteLog("Base currency:  "+base)
    JRRlog.WriteLog("Quote currency: "+quote)
    JRRlog.WriteLog("Trade direction: "+direction)

    AllTimeHigh=0.0
    Trade=EqSupport.ReadGrid(exchangeName,account,pair)
    if 'Profit' not in Trade:
        Trade['Profit']=0.0
    if 'BuyAmount' not in Trade or 'BuyLots' not in Trade:
        Trade=EqSupport.TradeBuyAmount(Config,Trade,exchange,pair,pct,RetryLimit)

    first=True
    while True:
        EqSupport.CheckHaltTracer(exchangeName,account,pair)
        # Rotate the key

        CurrentKey=((CurrentKey+1)%len(keys))
        Active=keys[CurrentKey]
        JRRapi.SetExchangeAPI(exchange,Active)

        # Actual algorithm

        bal=JRRapi.GetContract(exchange,pair,RetryLimit)

        # Rotate the key

        CurrentKey=((CurrentKey+1)%len(keys))
        Active=keys[CurrentKey]
        JRRapi.SetExchangeAPI(exchange,Active)

        ohlcv,ticker=JRRapi.FetchRetry(exchange,pair,"1m",RetryLimit)
        close=round(ohlcv[4],8)

# Reset the cycle if either Counter is 0 or bal is less than minimum.

        if not paper:
            if bal<Trade['BuyAmount']:
                if Trade['PCTValue']==0:
                    Trade['PCTValue']=round(close*pct,8)
                Trade['Counter']=0
                EqSupport.WriteFutureLog(exchangeName,account,pair,direction,f"{pair:10} Balance ({bal:.8f}) < Amount ({Trade['BuyAmount']:.8f}), Resetting grid")

        # Rotate the key

        CurrentKey=((CurrentKey+1)%len(keys))
        Active=keys[CurrentKey]
        JRRapi.SetExchangeAPI(exchange,Active)

        # The rational behind this is that as the price
        # drops, so does the percentage require to make each
        # boundary. In shorting, this will mean excessive
        # purchases. The only real way to counter this is to
        # forwce the buying percentage to be based upon the 
        # all time high, just as the long PCT is at grid reset.
        # The ATH is then used at 4 time the percentage boundary
        # to ensure that runaway markets (DASH) don't destroy
        # the portfolio.

        if direction=='short':
            if close>AllTimeHigh:
                AllTimeHigh=close

        if Trade['Counter']==0:
            if not first:
                EqSupport.CheckStopTracer(exchangeName,account,pair)

            if Config['ExitProfit']>0:
                if Trade['Profit']>=Config['ExitProfit']:
                    if quote not in JRRconfig.StableCoinUSD:
                        forceQuote=True
                    else:
                        forceQuote=False
                    minimum,mincost=JRRapi.GetMinimum(exchange,pair,forceQuote,False,RetryLimit)
                    if bal>minimum and bal<Trade['BuyAmount']:
                        res=JRRsupport.SendWebhook(Active,exchangeName,marketType,account,orderType,pair,'close',Trade['BuyAmount'],close)

                    EqSupport.EraseGrid(exchangeName,account,pair)
                    JRRlog.SuccessLog("Equilibrium","Exit profit achieved, "+str(Trade['Profit']))

            # First purchase sets the direction. MUST be in the direction
            # specified on the command line or in the confguration file.

            # the first position must be opened up in the direction of
            # the trade itself even though it is the opposite of the
            # functionality of the API. FTX in particular using this 
            # to lock the direction of the trade.

            if not paper:
                Trade=EqSupport.TradeBuyAmount(Config,Trade,exchange,pair,pct,RetryLimit)

                if EqSupport.CheckHighLow(close,Config['BuyStopLow'],Config['BuyStopHigh']):
                    res=JRRsupport.SendWebhook(Active,exchangeName,marketType,account,orderType,pair,BuyDir,Trade['BuyAmount'],close)
                    if res.find('Order Confirmation ID')>-1:
                        OrderID=EqSupport.GetOrderID(res)
                        Trade=EqSupport.IncreaseTradeTable(Trade,close,pct,direction,AllTimeHigh)

                        bal=JRRapi.GetContract(exchange,pair,RetryLimit)

                        vbuy='Buy/'+direction.capitalize()
                        EqSupport.WriteFutureLog(exchangeName,account,pair,direction,f"{pair:10} {vbuy:10} {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f} {OrderID} {bal:.8f}")

                        EqSupport.WriteGrid(exchangeName,account,Trade,pair)
                    else:
                        Trade=EqSupport.IncreaseTradeTable(Trade,close,pct,direction,AllTimeHigh)
                        EqSupport.WriteGrid(exchangeName,account,Trade,pair)
                else:
                    JRRlog.ErrorLog("Equilibrium","Order failed")
            else:
                Trade=EqSupport.IncreaseTradeTable(Trade,close,pct,direction,AllTimeHigh)

                vbuy='Buy/'+direction.capitalize()
                EqSupport.WriteFutureLog(exchangeName,account,pair,direction,f"{pair:10} {vbuy:10} {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f}")
                EqSupport.WriteGrid(exchangeName,account,Trade,pair)

# Make a purchase.

        if direction=='long':
            IsBuy=close<Trade['Buy']
            cv=Trade['Buy']
        else:
            IsBuy=close>Trade['Sell']
            cv=Trade['Sell']

        if IsBuy:
            if not paper:
                if EqSupport.CheckHighLow(close,Config['BuyStopLow'],Config['BuyStopHigh']):
                    res=JRRsupport.SendWebhook(Active,exchangeName,marketType,account,orderType,pair,BuyDir,Trade['BuyAmount'],cv)
                    if res.find('Order Confirmation ID')>-1:
                        OrderID=EqSupport.GetOrderID(res)
                        Trade=EqSupport.IncreaseTradeTable(Trade,close,pct,direction,AllTimeHigh)

                        bal=JRRapi.GetContract(exchange,pair,RetryLimit)

                        vbuy='Buy/'+BuyDir.capitalize()
                        EqSupport.WriteFutureLog(exchangeName,account,pair,direction,f"{pair:10} {vbuy:10} {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f} {OrderID} {bal:.8f}")
                        EqSupport.WriteGrid(exchangeName,account,Trade,pair)
                    else:
                        Trade=EqSupport.IncreaseTradeTable(Trade,close,pct,direction,AllTimeHigh)
                        EqSupport.WriteGrid(exchangeName,account,Trade,pair)
                else:
                    JRRlog.ErrorLog("Equilibrium","Order failed")
            else:
                Trade=EqSupport.IncreaseTradeTable(Trade,close,pct,direction,AllTimeHigh)

                vbuy='Buy/'+BuyDir.capitalize()
                EqSupport.WriteFutureLog(exchangeName,account,pair,direction,f"{pair:10} {vbuy:10} {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f}")
                EqSupport.WriteGrid(exchangeName,account,Trade,pair)

# Make a sell only if balance > minimum

        if direction=='long':
            IsSell=close>Trade['Sell']
            cv=Trade['Sell']
        else:
            IsSell=close<Trade['Buy']
            cv=Trade['Buy']

        if Trade['Counter']>0 and IsSell:
            if not paper:
                Trade=EqSupport.TradeSellAmount(Config,Trade,exchange,pair,pct,RetryLimit)
                SellAMT=Trade['SellAmount']
                if SellAMT>bal:
                    SellAMT=bal
                if EqSupport.CheckHighLow(close,Config['BuyStopLow'],Config['BuyStopHigh']):
                    res=JRRsupport.SendWebhook(Active,exchangeName,marketType,account,orderType,pair,SellDir,SellAMT,cv)
                    if res.find('Order Confirmation ID')>-1:
                        OrderID=EqSupport.GetOrderID(res)
                        Trade=EqSupport.DecreaseTradeTable(Trade,close,SellAMT,direction,AllTimeHigh)

                        bal=JRRapi.GetContract(exchange,pair,RetryLimit)

                        vsell='Sell/'+SellDir.capitalize()
                        if Trade['Counter']>0:
                            EqSupport.WriteFutureLog(exchangeName,account,pair,direction,f"{pair:10} {vsell:10} {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f} {OrderID} {bal:.8f}")
                        else:
                            EqSupport.WriteFutureLog(exchangeName,account,pair,direction,f"{pair:10} {vsell:10} {Trade['Counter']:2.0f} {OrderID} {bal:.8f}")
                        EqSupport.WriteGrid(exchangeName,account,Trade,pair)
                    else:
                        Trade=EqSupport.DecreaseTradeTable(Trade,close,SellAMT,direction,AllTimeHigh)
                        EqSupport.WriteGrid(exchangeName,account,Trade,pair)
                else:
                    JRRlog.ErrorLog("Equilibrium","Order failed")
            else:
                Trade=EqSupport.DecreaseTradeTable(Trade,close,SellAMT,direction,AllTimeHigh)

                vsell='Sell/'+SellDir.capitalize()
                if Trade['Counter']>0:
                    EqSupport.WriteFutureLog(exchangeName,account,pair,direction,f"{pair:10} {vsell:10} {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f}")
                else:
                    EqSupport.WriteFutureLog(exchangeName,account,pair,direction,f"{pair:10} {vsell:10} {Trade['Counter']:2.0f}")
                EqSupport.WriteGrid(exchangeName,account,Trade,pair)

        first=False
        JRRsupport.ElasticSleep(1)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Terminated")

