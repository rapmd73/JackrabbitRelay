#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit Equilibrium
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

"""
{
    "Exchange":"kucoin",
    "Account":"Scavenger",
    "Asset":"LTC/USDT",
    "Boundary":"1",         # Percentage boundary
    "BuyLots":"1",          # Buy size 1 lot
    "BuyLots":"Balnce",     # Buy size is dynamic based of balance (lots)
    "SellLots":"1.2",       # Sell size 1.2 lots
    "SellLots":"Dynamic",   # Sell based upon depth, use OverSell as a percentage value,
    "OverSell":"2",         # maximum percentage used when SellLots os Dynamic. % of BuyLots
    "OrderType":"LimitMaker",
}
"""

import sys
sys.path.append('/home/JackrabbitRelay/Base/Library')
import os
#from datetime import datetime
#import pathlib
#import time
#import requests
#import json

import JRRconfig
import JRRlog
import JRRapi
import JRRsupport

sys.path.append('/home/Equilibrium/Library')
import EqSupport

Header='Equilibrium '+JRRconfig.Version

###
### Main code base. Place order on exchange
###

def main():
    JRRlog.WriteLog(Header)

    # Read CFG file
    if len(sys.argv) > 1:
        Config=EqSupport.ReadConfig(sys.argv[1])
    else:
        print("A valid configuration file must be provided.")
        sys.exit(1)

    paper=False
    if 'Paper' in Config:
        paper=True

    exchangeName=Config['Exchange']
    account=Config['Account']
    pair=Config['Asset']
    pct=Config['Boundary']
    orderType=Config['OrderType']

    keys=JRRsupport.ReadConfig(exchangeName,account)
    JRRlog.WriteLog("API(s)/Secret(s) loaded for "+exchangeName+", (sub)account: "+account)

    CurrentKey=(os.getpid()%len(keys))
    Active=keys[CurrentKey]

    exchange=JRRapi.ExchangeLogin(exchangeName,Active)

    if "Retry" in Active:
        RetryLimit=int(Active['Retry'])
        JRRlog.WriteLog("|- API Retry limit set to "+str(RetryLimit)+' times')
    else:
        RetryLimit=10

    if not "Webhook" in Active:
        JRRlog.ErrorLog("Equilibrium","Webhook NOT present")

    markets=JRRapi.GetMarkets(exchange,pair,RetryLimit)

# This is where a looping method would go if this were to serve a single exchange
# with multiple pairs.

# Get asset information

    base=exchange.markets[pair]['base']
    quote=exchange.markets[pair]['quote']

    marketType="spot"
    if "type" in exchange.markets[pair]:
        if "type" in exchange.markets[pair]['info']:
            if exchange.markets[pair]['info']['type']==exchange.markets[pair]['type']:
                marketType=exchange.markets[pair]['type']
            else:
                marketType=exchange.markets[pair]['info']['type']

    JRRlog.WriteLog("Base currency:  "+base)
    JRRlog.WriteLog("Quote currency: "+quote)

    Trade=EqSupport.ReadGrid(exchangeName,account,pair)
    if 'Profit' not in Trade:
        Trade['Profit']=0.0
    if 'BuyAmount' not in Trade or 'BuyLots' not in Trade:
        Trade=EqSupport.TradeBuyAmount(Config,Trade,exchange,pair,pct,RetryLimit)

    first=True
    while True:
        CheckHaltTracer(exchangeName,account,pair)
        # Rotate the key

        CurrentKey=((CurrentKey+1)%len(keys))
        Active=keys[CurrentKey]
        JRRapi.SetExchangeAPI(exchange,Active)

        # Actual algorithm

        bal=JRRapi.GetBalance(exchange,base,RetryLimit)

        # Rotate the key

        CurrentKey=((CurrentKey+1)%len(keys))
        Active=keys[CurrentKey]
        JRRapi.SetExchangeAPI(exchange,Active)

        ohlcv,ticker=JRRapi.FetchRetry(exchange,pair,"1m",RetryLimit)
        close=round(ohlcv[4],8)

# Reset the cycle if either Counter is 0 or bal is less than minimum.

        if not paper:
            if bal<Trade['BuyAmount']:
                if Trade['PCTValue']==0:
                    Trade['PCTValue']=round(close*pct,8)
                Trade['Counter']=0
                EqSupport.WriteSpotLog(exchangeName,account,pair,f"{pair:10} Balance ({bal:.8f}) < Amount ({Trade['BuyAmount']:.8f}), Resetting grid")

        # Rotate the key

        CurrentKey=((CurrentKey+1)%len(keys))
        Active=keys[CurrentKey]
        JRRapi.SetExchangeAPI(exchange,Active)

        if Trade['Counter']==0:
            if not first:
                CheckStopTracer(exchangeName,account,pair)

            if Config['ExitProfit']>0:
                if Trade['Profit']>=Config['ExitProfit']:
                    EqSupport.EraseGrid(exchangeName,account,pair)
                    JRRlog.SuccessLog("Equilibrium","Exit profit achieved")

            if not paper:
                Trade=EqSupport.TradeBuyAmount(Config,Trade,exchange,pair,pct,RetryLimit)

                if EqSupport.CheckHighLow(close,Config['BuyStopLow'],Config['BuyStopHigh']):
                    res=EqSupport.SendWebhook(Active,exchangeName,marketType,account,orderType,pair,'buy',Trade['BuyAmount'],close)
                    if res.find('Order Confirmation ID')>-1:
                        OrderID=EqSupport.GetOrderID(res)
                        Trade=EqSupport.IncreaseLongTradeTable(Trade,close,pct)

                        bal=JRRapi.GetBalance(exchange,base,RetryLimit)
                        EqSupport.WriteSpotLog(exchangeName,account,pair,f"{pair:10} Buy  {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f} {OrderID} {bal:.8f}")

                        EqSupport.WriteGrid(exchangeName,account,Trade,pair)
                    else:
                        JRRlog.ErrorLog("Equilibrium","Order failed")
                else:
                    Trade=EqSupport.IncreaseLongTradeTable(Trade,close,pct)
                    EqSupport.WriteGrid(exchangeName,account,Trade,pair)
            else:
                Trade=EqSupport.IncreaseLongTradeTable(Trade,close,pct)

                EqSupport.WriteSpotLog(exchangeName,account,pair,f"{pair:10} Buy  {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f}")
                EqSupport.WriteGrid(exchangeName,account,Trade,pair)

# Make a purchase.

        if close<Trade['Buy']:
            if not paper:
                if EqSupport.CheckHighLow(close,Config['BuyStopLow'],Config['BuyStopHigh']):
                    res=EqSupport.SendWebhook(Active,exchangeName,marketType,account,orderType,pair,'buy',Trade['BuyAmount'],Trade['Buy'])
                    if res.find('Order Confirmation ID')>-1:
                        OrderID=EqSupport.GetOrderID(res)
                        Trade=EqSupport.IncreaseLongTradeTable(Trade,close,pct)

                        bal=JRRapi.GetBalance(exchange,base,RetryLimit)
                        EqSupport.WriteSpotLog(exchangeName,account,pair,f"{pair:10} Buy  {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f} {OrderID} {bal:.8f}")

                        EqSupport.WriteGrid(exchangeName,account,Trade,pair)
                    else:
                        JRRlog.ErrorLog("Equilibrium","Order failed")
                else:
                    Trade=EqSupport.IncreaseLongTradeTable(Trade,close,pct)
                    EqSupport.WriteGrid(exchangeName,account,Trade,pair)
            else:
                Trade=EqSupport.IncreaseLongTradeTable(Trade,close,pct)

                EqSupport.WriteSpotLog(exchangeName,account,pair,f"{pair:10} Buy  {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f}")
                EqSupport.WriteGrid(exchangeName,account,Trade,pair)

# Make a sell only if balance > minimum

        if Trade['Counter']>0 and close>Trade['Sell']:
            if not paper:
                Trade=EqSupport.TradeSellAmount(Config,Trade,exchange,pair,pct,RetryLimit)
                SellAMT=Trade['SellAmount']
                if SellAMT>bal:
                    SellAMT=bal
                if EqSupport.CheckHighLow(close,Config['SellStopLow'],Config['SellStopHigh']):
                    res=EqSupport.SendWebhook(Active,exchangeName,marketType,account,orderType,pair,'sell',SellAMT,Trade['Sell'])
                    if res.find('Order Confirmation ID')>-1:
                        OrderID=EqSupport.GetOrderID(res)
                        Trade=EqSupport.DecreaseLongTradeTable(Trade,close,SellAMT)

                        bal=JRRapi.GetBalance(exchange,base,RetryLimit)
                        if Trade['Counter']>0:
                            EqSupport.WriteSpotLog(exchangeName,account,pair,f"{pair:10} Sell {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f} {OrderID} {bal:.8f}")
                        else:
                            EqSupport.WriteSpotLog(exchangeName,account,pair,f"{pair:10} Sell {Trade['Counter']:2.0f} {OrderID} {bal:.8f}")
                        EqSupport.WriteGrid(exchangeName,account,Trade,pair)
                    else:
                        JRRlog.ErrorLog("Equilibrium","Order failed")
                else:
                    Trade=EqSupport.DecreaseLongTradeTable(Trade,close,0)
                    EqSupport.WriteGrid(exchangeName,account,Trade,pair)
            else:
                Trade=EqSupport.DecreaseLongTradeTable(Trade,close,minimum)

                if Trade['Counter']>0:
                    EqSupport.WriteSpotLog(exchangeName,account,pair,f"{pair:10} Sell {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f}")
                else:
                    EqSupport.WriteSpotLog(exchangeName,account,pair,f"{pair:10} Sell {Trade['Counter']:2.0f}")
                EqSupport.WriteGrid(exchangeName,account,Trade,pair)

        first=False
        JRRsupport.ElasticSleep(1)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Terminated")

