#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit Equilibrium
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

"""
{
    "Exchange":"kucoin",
    "Account":"Scavenger",
    "Asset":"LTC/USDT",
    "Boundary":"1",         # Percentage boundary
    "BuyLots":"1",          # Buy size 1 lot
    "BuyLots":"Balnce",     # Buy size is dynamic based of balance (lots)
    "SellLots":"1.2",       # Sell size 1.2 lots
    "SellLots":"Dynamic",   # Sell based upon depth, use OverSell as a percentage value,
    "OverSell":"2",         # maximum percentage used when SellLots os Dynamic. % of BuyLots
    "OrderType":"LimitMaker",
}
"""

import sys
sys.path.append('/home/JackrabbitRelay/Base/Library')
import os
from datetime import datetime
import pathlib
import time
import requests
import json

import JRRconfig
import JRRlog
import JRRapi
import JRRsupport

Header='Equilibrium '+JRRconfig.Version

def SendWebhook(Active,exchangeName,market,account,orderType,pair,action,amount,price):
    exc='"Exchange":"'+exchangeName+'", "Market":"'+market+'"'
    account='"Account":"'+account+'", "OrderType":"'+orderType+'"'
    sym='"Asset":"'+pair+'"'
    direction='"Action":"'+action.lower()+'"'
    psize='"Base":"'+str(amount)+'"'+',"Close":"'+str(price)+'"'

    if "Identity" in Active:
        idl='"Identity":"'+Active['Identity']+'"'
        cmd='{ '+idl+', '+exc+', '+account+', '+direction+', '+sym+', '+psize+' }'
    else:
        cmd='{ '+exc+', '+account+', '+direction+', '+sym+', '+psize+' }'

    headers={'content-type': 'text/plain', 'Connection': 'close'}

    resp=None
    res=None
    try:
        resp=requests.post(Active['Webhook'],headers=headers,data=cmd)
        try:
            r=json.loads(resp.text)
            try:
                res=r['message']
            except:
                res=json.dumps(r)
        except:
            res=resp.text
    except:
        res=None

    return res

def GetOrderID(res):
    s=res.find('ID:')+4
    for e in range(s,len(res)):
        if res[e]=='\n':
            break
    oid=res[s:e]

    return oid

def CheckStopTracer(exchangeName,account,Asset):
    fn=exchangeName+'.'+account+'.'+Asset.replace("-","").replace("/","").replace(':','')+'.stop'
    if os.path.exists(fn):
        JRRlog.SuccessLog("STOP", "tracer detected")

def ReadGrid(exchangeName,account,Asset):
    fn=exchangeName+'.'+account+'.'+Asset.replace("-","").replace("/","").replace(':','')+'.grid'
    if os.path.exists(fn):
        JRRlog.WriteLog("Reading Grid file")
        fh=open(fn,'r')
        for line in fh:
            Trade={}
            Trade=json.loads(line.rstrip())
        fh.close()
        JRRlog.WriteLog(f"|- {Asset:10} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f}")
    else:
        Trade={}
        Trade['PCTValue']=0.0
        Trade['Close']=0.0
        Trade['Buy']=0.0
        Trade['Sell']=0.0
        Trade['Counter']=0
        Trade['Profit']=0.0

    return(Trade)

def WriteGrid(exchangeName,account,Trade,Asset):
    fn=exchangeName+'.'+account+'.'+Asset.replace("-","").replace("/","").replace(':','')+'.grid'

    if Trade['Counter']>0:
        fh=open(fn,'w')
        fh.write(json.dumps(Trade)+"\n")
        fh.close()
    else:
        if os.path.exists(fn):
            os.remove(fn)

def WriteSpotLog(e,a,p,msg):
    PlaceOrderName=os.path.basename(sys.argv[0])
    pn=e+'.'+a+'.'+p.replace("-","").replace("/","").replace(':','')

    pid=os.getpid()
    time=(datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f'))

    s=f'{time} {pid:7.0f} {msg}\n'

    fh=open(JRRconfig.LogDirectory+'/'+PlaceOrderName+'.'+pn+'.log','a')
    fh.write(s)
    fh.close()
    print(s.rstrip())
    sys.stdout.flush()

# Convert account balance to lots in steps

def Balance2Lots(exchange,pair,pct,RetryLimit):
    quote=exchange.markets[pair]['quote']
    if quote not in JRRconfig.StableCoinUSD:
        hasQuote=True
    else:
        hasQuote=False

# Get exchange required minimums

    minimum,mincost=JRRapi.GetMinimum(exchange,pair,hasQuote,False,RetryLimit)

# Convert balance to number of steps and lots

    bal=JRRapi.GetBalance(exchange,quote,RetryLimit)
    steps=100/(pct*100)
    priceStep=bal/steps
    Lots=priceStep/mincost

    if Lots<1:
        Lots=1

    return Lots

# Read CFG file

def ReadConfig(fn):
    Required=[ "Exchange", "Account", "Asset", "Boundary", "BuyLots" ]

    Config={}

    JRRlog.WriteLog("Reading configuration file")

    if os.path.exists(fn):
        try:
            raw=pathlib.Path(fn).read_text()
        except:
            JRRlog.ErrorLog("ReadConfig",f"Can't read {fn}")

        txt=JRRsupport.pFilter(raw)

        try:
            Config=json.loads(txt)
        except:
            JRRlog.ErrorLog("ReadConfig",f"Damaged JSON: {txt}")
    else:
        JRRlog.ErrorLog("ReadConfig",'Config file not found.')

    for i in Config:
        JRRlog.WriteLog(f"|- {i}: {Config[i]}")

    for i in Required:
        if i not in Config:
            JRRlog.ErrorLog("ReadConfig",f"Missing required item: {i}")

    Config['Exchange']=Config['Exchange'].lower()
    Config['Asset']=Config['Asset'].upper()
    Config['Boundary']=float(Config['Boundary'])/100
    if "SellLots" not in Config:
        Config['SellLots']='Dynamic'
    if "OverSell" in Config:
        Config['OverSell']=float(Config['OverSell'])/100
    else:
        Config['OverSell']=20/100
    if "OrderType" not in Config:
        Config['OrderType']='Market'

    if "BuyStopHigh" in Config:
        Config['BuyStopHigh']=float(Config['BuyStopHigh'])
    else:
        Config['BuyStopHigh']=-1
    if "BuyStopLow" in Config:
        Config['BuyStopLow']=float(Config['BuyStopLow'])
    else:
        Config['BuyStopLow']=-1
    if "SellStopHigh" in Config:
        Config['SellStopHigh']=float(Config['SellStopHigh'])
    else:
        Config['SellStopHigh']=-1
    if "SellStopLow" in Config:
        Config['SellStopLow']=float(Config['SellStopLow'])
    else:
        Config['SellStopLow']=-1
    if "ExitProfit" in Config:
        Config['ExitProfit']=float(Config['ExitProfit'])
    else:
        Config['ExitProfit']=-1

    return(Config)

def TradeBuyAmount(Config,Trade,exchange,pair,pct,RetryLimit):
    minimum,mincost=JRRapi.GetMinimum(exchange,pair,False,False,RetryLimit)

    if Config['BuyLots'].lower()=='balance':
        Trade['BuyLots']=Balance2Lots(exchange,pair,pct,RetryLimit)
        Trade['BuyAmount']=Trade['BuyLots']*minimum
    else:
        Trade['BuyLots']=Config['BuyLots']
        p=float(Trade['BuyLots'])
        if p<1:
            p=1
        Trade['BuyAmount']=minimum*p

    return Trade

def TradeSellAmount(Config,Trade,exchange,pair,pct,RetryLimit):
    minimum,mincost=JRRapi.GetMinimum(exchange,pair,False,False,RetryLimit)

    if Config['SellLots'].lower()=='dynamic':
        if Trade['Counter']>0:
            pb=(Config['OverSell']/100)*(Trade['Counter']/(100*pct))*pct
            ba=float(Trade['BuyLots'])*minimum
            Trade['SellAmount']=ba+(ba*pb)
        else:
            Trade['SellAmount']=float(Trade['BuyAmount'])
    elif Config['SellLots'].lower()=='buylots':
        Trade['SellAmount']=float(Trade['BuyAmount'])
    else:
        Trade['SellAmount']=minimum*float(Config['SellLots'])

    return Trade

def CheckHighLow(c,l,h):
    if l==-1 and h==-1:
        return True

    if c>=l and h==-1:
        return True
    else:
        return False

    if l==-1 and c<=h:
        return True
    else:
        return False

    if c>=l and c<=h:
        return True
    else:
        return False

###
### Main code base. Place order on exchange
###

def main():
    JRRlog.WriteLog(Header)

    # Read CFG file
    if len(sys.argv) > 1:
        Config=ReadConfig(sys.argv[1])
    else:
        print("A valid configuration file must be provided.")
        sys.exit(1)

    once=False
    if len(sys.argv) > 2 and sys.argv[2].lower()=='once':
        once=True

    paper=False
    if 'Paper' in Config:
        paper=True

    exchangeName=Config['Exchange']
    account=Config['Account']
    pair=Config['Asset']
    pct=Config['Boundary']
    orderType=Config['OrderType']

    keys=JRRsupport.ReadConfig(exchangeName,account)
    JRRlog.WriteLog("API(s)/Secret(s) loaded for "+exchangeName+", (sub)account: "+account)

    CurrentKey=(os.getpid()%len(keys))
    Active=keys[CurrentKey]

    exchange=JRRapi.ExchangeLogin(exchangeName,Active)

    if "Retry" in Active:
        RetryLimit=int(Active['Retry'])
        JRRlog.WriteLog("|- API Retry limit set to "+str(RetryLimit)+' times')
    else:
        RetryLimit=10

    if not "Webhook" in Active:
        JRRlog.ErrorLog("Equilibrium","Webhook NOT present")

    markets=JRRapi.GetMarkets(exchange,pair,RetryLimit)

# This is where a looping method would go if this were to serve a single exchange
# with multiple pairs.

# Get asset information

    base=exchange.markets[pair]['base']
    quote=exchange.markets[pair]['quote']

    marketType="spot"
    if "type" in exchange.markets[pair]:
        if "type" in exchange.markets[pair]['info']:
            if exchange.markets[pair]['info']['type']==exchange.markets[pair]['type']:
                marketType=exchange.markets[pair]['type']
            else:
                marketType=exchange.markets[pair]['info']['type']

    JRRlog.WriteLog("Base currency:  "+base)
    JRRlog.WriteLog("Quote currency: "+quote)

    Trade=ReadGrid(exchangeName,account,pair)
    if 'Profit' not in Trade:
        Trade['Profit']=0.0
    if 'BuyAmount' not in Trade or 'BuyLots' not in Trade:
        Trade=TradeBuyAmount(Config,Trade,exchange,pair,pct,RetryLimit)

    first=True

    while True:
        # Rotate the key

        CurrentKey=((CurrentKey+1)%len(keys))
        Active=keys[CurrentKey]
        JRRapi.SetExchangeAPI(exchange,Active)

        # Actual algorithm

        bal=JRRapi.GetBalance(exchange,base,RetryLimit)

        # Rotate the key

        CurrentKey=((CurrentKey+1)%len(keys))
        Active=keys[CurrentKey]
        JRRapi.SetExchangeAPI(exchange,Active)

        ohlcv,ticker=JRRapi.FetchRetry(exchange,pair,"1m",RetryLimit)
        close=round(ohlcv[4],8)

# Reset the cycle if either Counter is 0 or bal is less than minimum.

        if not paper:
            if bal<Trade['BuyAmount']:
                if Trade['PCTValue']==0:
                    Trade['PCTValue']=round(close*pct,8)
                Trade['Counter']=0
                WriteSpotLog(exchangeName,account,pair,f"{pair:10} Balance ({bal:.8f}) < Amount ({Trade['BuyAmount']:.8f}), Resetting grid")

        # Rotate the key

        CurrentKey=((CurrentKey+1)%len(keys))
        Active=keys[CurrentKey]
        JRRapi.SetExchangeAPI(exchange,Active)

        if Trade['Counter']==0 and CheckHighLow(close,Config['BuyStopLow'],Config['BuyStopHigh']):
            if not first and once:
                JRRlog.SuccessLog("Equilibrium","One cycle completed")

            print(Config['ExitProfit'],Trade['Profit'])

            if Config['ExitProfit']>0:
                if Trade['Profit']>=Config['ExitProfit']:
                    JRRlog.SuccessLog("Equilibrium","Exit profit achieved")

            if not first:
                CheckStopTracer(exchangeName,account,pair)

            if not paper:
                Trade=TradeBuyAmount(Config,Trade,exchange,pair,pct,RetryLimit)

                res=SendWebhook(Active,exchangeName,marketType,account,orderType,pair,'buy',Trade['BuyAmount'],close)
                if res.find('Order Confirmation ID')>-1:
                    OrderID=GetOrderID(res)
                    if Trade['PCTValue']==0:
                        Trade['PCTValue']=round(close*pct,8)
                    Trade['Close']=round(close,8)
                    Trade['Buy']=round(Trade['Close']-Trade['PCTValue'],8)
                    Trade['Sell']=round(Trade['Close']+Trade['PCTValue'],8)
                    Trade['Counter']+=1

                    bal=JRRapi.GetBalance(exchange,base,RetryLimit)
                    WriteSpotLog(exchangeName,account,pair,f"{pair:10} Buy  {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f} {OrderID} {bal:.8f}")

                    WriteGrid(exchangeName,account,Trade,pair)
                else:
                    JRRlog.ErrorLog("Equilibrium","Order failed")
            else:
                Trade['PCTValue']=round(close*pct,8)
                Trade['Close']=round(close,8)
                Trade['Buy']=round(Trade['Close']-Trade['PCTValue'],8)
                Trade['Sell']=round(Trade['Close']+Trade['PCTValue'],8)
                Trade['Counter']+=1

                WriteSpotLog(exchangeName,account,pair,f"{pair:10} Buy  {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f}")
                WriteGrid(exchangeName,account,Trade,pair)

# Make a purchase.

        if close<Trade['Buy'] and CheckHighLow(close,Config['BuyStopLow'],Config['BuyStopHigh']):
            if not paper:
                res=SendWebhook(Active,exchangeName,marketType,account,orderType,pair,'buy',Trade['BuyAmount'],Trade['Buy'])
                if res.find('Order Confirmation ID')>-1:
                    OrderID=GetOrderID(res)
                    Trade['Close']=round(Trade['Buy'],8)
                    Trade['Buy']=round(Trade['Close']-Trade['PCTValue'],8)
                    Trade['Sell']=round(Trade['Close']+Trade['PCTValue'],8)
                    Trade['Counter']+=1

                    bal=JRRapi.GetBalance(exchange,base,RetryLimit)
                    WriteSpotLog(exchangeName,account,pair,f"{pair:10} Buy  {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f} {OrderID} {bal:.8f}")

                    WriteGrid(exchangeName,account,Trade,pair)
                else:
                    JRRlog.ErrorLog("Equilibrium","Order failed")
            else:
                Trade['Close']=round(Trade['Buy'],8)
                Trade['Buy']=round(Trade['Close']-Trade['PCTValue'],8)
                Trade['Sell']=round(Trade['Close']+Trade['PCTValue'],8)
                Trade['Counter']+=1

                WriteSpotLog(exchangeName,account,pair,f"{pair:10} Buy  {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f}")
                WriteGrid(exchangeName,account,Trade,pair)

# Make a sell only if balance > minimum

        if Trade['Counter']>0 and close>Trade['Sell'] and CheckHighLow(close,Config['SellStopLow'],Config['SellStopHigh']):
            if not paper:
                Trade=TradeSellAmount(Config,Trade,exchange,pair,pct,RetryLimit)
                SellAMT=Trade['SellAmount']
                if SellAMT>bal:
                    SellAMT=bal
                res=SendWebhook(Active,exchangeName,marketType,account,orderType,pair,'sell',SellAMT,Trade['Sell'])
                if res.find('Order Confirmation ID')>-1:
                    OrderID=GetOrderID(res)
                    Trade['Profit']+=round((close-Trade['Close'])*SellAMT,8)
                    Trade['Close']=round(Trade['Sell'],8)
                    Trade['Buy']=round(Trade['Close']-Trade['PCTValue'],8)
                    Trade['Sell']=round(Trade['Close']+Trade['PCTValue'],8)
                    Trade['Counter']-=1

                    bal=JRRapi.GetBalance(exchange,base,RetryLimit)
                    if Trade['Counter']>0:
                        WriteSpotLog(exchangeName,account,pair,f"{pair:10} Sell {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f} {OrderID} {bal:.8f}")
                    else:
                        WriteSpotLog(exchangeName,account,pair,f"{pair:10} Sell {Trade['Counter']:2.0f} {OrderID} {bal:.8f}")
                    WriteGrid(exchangeName,account,Trade,pair)
                else:
                    JRRlog.ErrorLog("Equilibrium","Order failed")
            else:
                Trade['Profit']+=round((close-Trade['Close'])*SellAMT,8)
                Trade['Close']=round(Trade['Sell'],8)
                Trade['Buy']=round(Trade['Close']-Trade['PCTValue'],8)
                Trade['Sell']=round(Trade['Close']+Trade['PCTValue'],8)
                Trade['Counter']-=1

                if Trade['Counter']>0:
                    WriteSpotLog(exchangeName,account,pair,f"{pair:10} Sell {Trade['Counter']:2.0f} {Trade['Buy']:.8f} {Trade['Close']:.8f} {Trade['Sell']:.8f}")
                else:
                    WriteSpotLog(exchangeName,account,pair,f"{pair:10} Sell {Trade['Counter']:2.0f}")
                WriteGrid(exchangeName,account,Trade,pair)

        first=False
        JRRsupport.ElasticSleep(1)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Terminated")

