#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit Relay
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

import sys
sys.path.append('/home/JackrabbitRelay2/Base/Library')
import os
import time
import datetime
import json
import plotly.express as px
import plotly.graph_objects as go
import plotly.subplots as ps

import JRRsupport
import JackrabbitRelay as JRR

# Initialize global signal interceptor. prevent file trashing on CTRL-C

Log=JRR.JackrabbitLog()
interceptor=JRRsupport.SignalInterceptor(Log=Log)

# Directories

DataDirectory='/home/JackrabbitRelay2/Data'
chartDir=DataDirectory+'/Charts/'
OliverTwistData=DataDirectory+'/OliverTwist'

# For reading the storehouse

OliverTwistLock=JRRsupport.Locker("OliverTwist")

# Read the store house and return a list of the open orders being tracked.

def ReadStorehouse(exchange,account,asset):
    global OliverTwistLock

    Storehouse=f"{OliverTwistData}/{exchange}.{account}.{asset}.Storehouse"
    OrphanList=[]

    WorkingStorehouse=Storehouse

    while OliverTwistLock.Lock()!='locked':
        JRRsupport.ElasticSleep(1)

    if os.path.exists(WorkingStorehouse):
        buffer=JRRsupport.ReadFile(WorkingStorehouse).strip()
        if buffer!=None and buffer!='':
            Orphans=buffer.split('\n')
            for Entry in Orphans:
                # Force set InMotion to False
                Entry=Entry.strip()
                if Entry=='':
                    continue
                # Break down entry and set up memory locker
                try:
                    Orphan=Entry
                    while type(Orphan)==str:
                        Orphan=json.loads(Orphan)
                except:
                    JRLog.Write(f"Broken: {Entry}")
                    continue

                if 'Order' in Orphan:
                    if type(Orphan['Order'])==str:
                        order=json.loads(Orphan['Order'])
                        order.pop('Identity',None)
                        Orphan['Order']=order
                if 'Detail' in Orphan:
                    if type(Orphan['Detail'])==str:
                        detail=json.loads(Orphan['Detail'])
                        detail.pop('Identity',None)
                        Orphan['Detail']=detail

                OrphanList.append(Orphan)

    OliverTwistLock.Unlock()
    return OrphanList

# Find start date fom ending data an duration

def FindStartDateTime(end_date_str, duration_str):
    # Convert strings to datetime objects
    end_date = datetime.datetime.strptime(end_date_str, '%Y-%m-%d %H:%M:%S.%f')
    duration_parts = duration_str.split(', ')
    days = int(duration_parts[0].split()[0])
    time_parts = duration_parts[1].split(':')
    hours = int(time_parts[0])
    minutes = int(time_parts[1])
    seconds = float(time_parts[2].replace(',',''))

    # Calculate start date
    start_date = end_date - datetime.timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)

    # Display start date in the same format as end date
    start_date_formatted = start_date.strftime('%Y-%m-%d %H:%M:%S.%f')
    return start_date_formatted

###
### Main code base.
###

if len(sys.argv)<3:
    print("You must specify either (I)mage or (H)tml for output type as the first argumrnt.")
    print("A version 2 grid bot log must be specified as the swecond argument")
    sys.exit(1)

entry={}
relay={}
lines={}
orderList={}

# Copy arg list

ih=sys.argv[1].lower()
if ih!='i' and ih!='h':
    print("You MUST specify either (I)mage or (H)tml for output type")
    sys.exit(1)

gblog=sys.argv[2]

# Remove sys arg list

for i in range(1,len(sys.argv)):
    sys.argv.remove(sys.argv[1])

# Read the log file

print("Phase 1: read log file")
data=gblog.split('.')

exchange=data[1]
account=data[2]

if len(data)==5:
    asset=data[3]
    l=len(data[3])
    pair=data[3][:l-3]+'/'+data[3][-3:]
else:
    asset=data[4]
    l=len(data[3])
    pair=data[4][:l-3]+'/'+data[4][-3:]

# For Mimic, use the Details section to get the Price

OpenOrders=ReadStorehouse(exchange,account,asset)
if OpenOrders!=[]:
    OpenOrderDT=datetime.datetime.strptime(OpenOrders[0]['DateTime'], '%Y-%m-%d %H:%M:%S.%f')
    OpenEpoch=int(time.mktime(OpenOrderDT.timetuple()))
    pair=OpenOrders[0]['Order']['Asset']

    # Get ending date for lines

    EndOrderDate=str(datetime.datetime.now())
    EndOrderDT=datetime.datetime.strptime(EndOrderDate, '%Y-%m-%d %H:%M:%S.%f')
else:
    # Needed to ensure StartEpoch is lower if this exchange is NOT oanda
    OpenOrderDT=datetime.datetime.strptime(str(datetime.datetime.now()), '%Y-%m-%d %H:%M:%S.%f')
    OpenEpoch=int(time.mktime(OpenOrderDT.timetuple()))

# Read log file

lines=JRRsupport.ReadFile(gblog).strip().split('\n')

# Figure out first DT in log

StartDate=lines[0].split(' ')[0]
StartDT=datetime.datetime.strptime(StartDate, '%Y-%m-%d')
StartEpoch=int(time.mktime(StartDT.timetuple()))

# Get the oldest DT

OldestEpoch=min(OpenEpoch,StartEpoch)

ohlcv=[]
relay=JRR.JackrabbitRelay(framework='oanda',exchange=data[1],account=data[2],asset=pair)
for tf in relay.Timeframes:
    ohlcv=relay.GetOHLCV(symbol=pair,timeframe=tf,limit=5000)
    firstCandle=ohlcv[0][0]/1000
    if firstCandle<OldestEpoch:
        break

ChartTF=tf

# Make the chart inline to reading the data. Large numbers of orders will break web browsers.
# Chart header

if ih=='h':
    fn=chartDir+f'Trades.{exchange}.{account}.{asset}.html'
else:
    fn=chartDir+f'Trades.{exchange}.{account}.{asset}.png'

en=exchange
ts=f"OliverTwist Trades: {account} - {pair} ({ChartTF})"

fig1=ps.make_subplots(specs=[[{"secondary_y":False}]])

# Process the data and produce the graph. This section can use a lot of memory, but it is very fast as the data
# is loaded already.

#go.Ohlc(x=df['Date'], open=df['AAPL.Open'], high=df['AAPL.High'], low=df['AAPL.Low'], close=df['AAPL.Close'])

print("Phase 2: making the chart")

# Get the first candle of the trades to set the start of the chart.
dline=lines[0].split(' ')
while '' in dline:
    dline.remove('')
fid=dline[3]
std=None
try:
    oDetails=relay.GetOrderDetails(OrderID=fid)[0]
    sdt=datetime.datetime.strptime(oDetails['time'].split('T')[0], '%Y-%m-%d').timestamp()
except Exception as err:
    sdt=StartEpoch

# Plot candles of timeframe just above log
dt=[]
do=[]
dh=[]
dl=[]
dc=[]
for slice in ohlcv:
    cdt=slice[0]/1000
    # Do not add candles before forst trade
    if cdt<sdt:
        continue
    dt.append(datetime.datetime.fromtimestamp(slice[0]/1000))
    do.append(slice[1])
    dh.append(slice[2])
    dl.append(slice[3])
    dc.append(slice[4])
fig1.add_trace(go.Candlestick(x=dt,open=do,high=dh,low=dl,close=dc,increasing_line_color='#a0ffff',decreasing_line_color= '#ffa0ff'),secondary_y=False)

# Process open orders for oanda

dt=[]
dp=[]

for order in OpenOrders:
    dt=order['DateTime']

    if exchange=='oanda':
        try:
            oDetails=relay.GetOrderDetails(OrderID=order['ID'])[-1]
            dp=float(oDetails['price'])
            du=int(oDetails['units'])
        except Exception as err:
            print("Check OpenOrders",err)
            continue
    elif exchange=='mimic':
        du=float(order['Response']['Details']['Amount'])
        dp=float(order['Response']['Details']['Price'])
    else: # CCXT framework fall through
        du=float(order['Response']['Details']['amount'])
        dp=float(order['Response']['Details']['price'])

    htxt=f"{order['ID']}: {du:.0f}@{dp:.5f}"
    fig1.add_trace(go.Scatter(x=[dt,EndOrderDate],y=[dp,dp],marker_color="rgba(128,128,197,1)",mode='lines',hovertemplate=htxt),secondary_y=False)

# Plot trades

for line in lines:
    line=line.lower()
    if line=='' or ('prft' not in line and 'loss' not in line and 'rduc' not in line):
        continue
    if 'broke' in line:
        continue

    data=line.split(' ')
    while '' in data:
        data.remove('')

    # Date and time, duration
    dt=' '.join(line.split(' ')[0:2])
    if "days," in line or "day," in line:
        dur=f"{data[12]} {data[13]} {data[14]}"
    else:
        dur=f"0 days, {data[12]}"
    bTime=FindStartDateTime(dt,dur)

    # Prft/Loss
    action=data[6]
    dir=data[7].split(',')[0]

    amount=abs(float(data[8].split(':')[0]))
    bPrice=float(data[9])

    sTime=dt
    sPrice=float(data[11].split('/')[0])

    # Figure out profit/loss based on price action

    if dir=='long':
        rpl=(sPrice-bPrice)*amount
    else:
        rpl=(bPrice-sPrice)*amount

    if action=='prft' and rpl>0:        # Profit
        col="rgba(0,128,0,1)"
    elif action=='prft' and rpl==0:     # Breakeven
        col="rgba(128,128,0,1)"
    elif action=='prft' and rpl<0:      # Loss by slippage
        col="rgba(255,128,0,0.5)"
    elif action=='rduc':                # ReduceBy
        col="rgba(0,255,255,0.01)"
    elif action=='loss':                # Stoploss
        col="rgba(128,0,0,0.5)"
    else:
        print('L:',line)
        continue

    fig1.add_trace(go.Scatter(x=[bTime,sTime],y=[bPrice,sPrice],marker_color=col,mode='lines'),secondary_y=False)

# Chart footer

if os.path.exists('/home/JackrabbitRelay2/Data/logo.png'):
    if ih=='h':
        fig1.add_layout_image(dict(
            source='/logo.png',
            xref='paper',yref='paper',
            xanchor='center',yanchor='middle',
            x=0.5,y=0.5,
            sizex=1,sizey=1,
            opacity=0.1
        ))
    else:
        fig1.add_layout_image(dict(
            source='file:///home/JackrabbitRelay2/Data/logo.png',
            xref='paper',yref='paper',
            xanchor='center',yanchor='middle',
            x=0.5,y=0.5,
            sizex=1,sizey=1,
            opacity=0.1
        ))
fig1.update_yaxes(title_text='Price',secondary_y=False)
fig1.update_layout(title={"text":ts,"x":0.5,"xanchor":"center","yanchor":"top"},template='plotly_white',showlegend=False)
fig1.update(layout_xaxis_rangeslider_visible=False)

if ih=='h':
    fig1.write_html(fn)
else:
    fig1.write_image(fn,width=1920,height=1024)
