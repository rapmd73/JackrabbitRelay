#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit Procurator
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

import sys
sys.path.append('/home/JackrabbitRelay/Base/Library')
import os
from datetime import datetime
import pathlib
import time
import requests
import json

import JRRconfig
import JRRlog
import JRRapi
import JRRledger
import JRRsupport

sys.path.append('/home/Equilibrium/Library')
import EqSupport

Header='Procurator '+JRRconfig.Version

def ReadConfig(fn):
    Required=[ "Exchange", "Account", "Asset", "Top", "Bottom", "PositionSize" ]

    Config={}

    if os.path.exists(fn):
        try:
            raw=pathlib.Path(fn).read_text()
        except:
            JRRlog.ErrorLog("Procurator ReadConfig",f"Can't read {fn}")

        txt=JRRsupport.pFilter(raw)

        try:
            Config=json.loads(txt)
        except:
            JRRlog.ErrorLog("Procurator ReadConfig",f"Damaged JSON: {txt}")
    else:
        JRRlog.ErrorLog("Procurator ReadConfig",'Config file not found.')

    for i in Required:
        if i not in Config:
            JRRlog.ErrorLog("ReadConfig",f"Missing required item: {i}")

    Config['Exchange']=Config['Exchange'].lower()
    Config['Asset']=Config['Asset'].upper()
    Config['Top']=float(Config['Top'])
    Config['Bottom']=float(Config['Bottom'])

    if "Steps" in Config:
        Config['Steps']=int(Config['Steps'])
    elif "Pips" in Config:
        Config['Pips']=round(float(Config['Pips']),4)
    else:
        JRRlog.ErrorLog("Procurator ReadConfig","Either Steps or Pips MUST be present")

    if "ExitProfit" in Config:
        Config['ExitProfit']=float(Config['ExitProfit'])
    else:
        Config['ExitProfit']=-1

    if "TakeProfit" in Config:
        Config['TakeProfit']=float(Config['TakeProfit'])
    else:
        Config['TakeProfit']=-1

    JRRlog.WriteSpotLog(Config['Exchange'],Config['Account'],Config['Asset'],Header)

    for i in Config:
        JRRlog.WriteSpotLog(Config['Exchange'],Config['Account'],Config['Asset'],f"|- {i}: {Config[i]}")

    return(Config)

def GetTicker(exchange,account,pair):
    c=1
    done=False
    while not done:
        try:
            ticker=exchange.fetch_ticker(pair)
        except Exception as e:
            er=JRRapi.StopHTMLtags(str(e))
            JRRlog.WriteSpotLog(exchangeName,account,pair,f"GetTicker retry #{c:.0f}: {er}")
            c+=1
            JRRsupport.ElasticSleep(1)
        else:
            done=True
    return ticker

def MakeOrder(exchange,account,pair,direction,amount,price):
    c=1
    done=False
    while not done:
        try:
            order=exchange.create_order(pair, 'limit', direction, amount, price)
        except Exception as e:
            er=JRRapi.StopHTMLtags(str(e))
            JRRlog.WriteSpotLog(exchangeName,account,pair,f"MakeOrder retry #{c:.0f} at {price:0.8f}: {er}")
            c+=1
            JRRsupport.ElasticSleep(1)
        else:
            done=True
    return order

def GetOrder(exchange,account,pair,pid):
    c=1
    done=False
    while not done:
        try:
            order=exchange.fetch_order(pid)
        except Exception as e:
            er=JRRapi.StopHTMLtags(str(e))
            JRRlog.WriteSpotLog(exchangeName,account,pair,f"GetOrder retry #{c:.0f}/{pid}: {er}")
            c+=1
            JRRsupport.ElasticSleep(1)
        else:
            done=True
    return order

def ReadGrid(exchangeName,account,Asset):
    fn=exchangeName+'.'+account+'.'+Asset.replace("-","").replace("/","").replace(':','')+'.orderlist'
    if os.path.exists(fn):
        JRRlog.WriteSpotLog(exchangeName,account,Asset,"Reading Grid file")
        fh=open(fn,'r')
        for line in fh:
            Trade={}
            Trade=json.loads(line.rstrip())
        fh.close()
        JRRlog.WriteSpotLog(exchangeName,account,Asset,f"|- {Asset:10} {len(Trade['OrderList'])} orders loaded")
    else:
        Trade={}
        Trade['Profit']=0.0
        Trade['OrderList']=[]

    return(Trade)

def WriteGrid(exchangeName,account,Trade,Asset):
    fn=exchangeName+'.'+account+'.'+Asset.replace("-","").replace("/","").replace(':','')+'.orderlist'

    fh=open(fn,'w')
    fh.write(json.dumps(Trade)+"\n")
    fh.close()

###
### Main code base. Place order on exchange
###

def main():
    # Read CFG file
    if len(sys.argv) > 1:
        Config=ReadConfig(sys.argv[1])
    else:
        print("A valid configuration file must be provided.")
        sys.exit(1)

    paper=False
    if 'Paper' in Config:
        paper=True

    exchangeName=Config['Exchange']
    account=Config['Account']
    pair=Config['Asset']
    topValue=float(Config['Top'])
    bottomValue=float(Config['Bottom'])
    psize=float(Config['PositionSize'])

    keys=JRRsupport.ReadConfig(exchangeName,account)

    JRRlog.WriteSpotLog(exchangeName,account,pair,"API(s)/Secret(s) loaded for "+exchangeName+", (sub)account: "+account)

    CurrentKey=(os.getpid()%len(keys))
    Active=keys[CurrentKey]

    exchange=JRRapi.ExchangeLogin(exchangeName,Active,Notify=False)

    if "Retry" in Active:
        RetryLimit=int(Active['Retry'])
        JRRlog.WriteSpotLog(exchangeName,account,pair,"|- API Retry limit set to "+str(RetryLimit)+' times')
    else:
        RetryLimit=10

    if not "Webhook" in Active:
        JRRlog.ErrorLog("Procurator","Webhook NOT present")

    markets=JRRapi.GetMarkets(exchange,pair,RetryLimit,Notify=False)

# This is where a looping method would go if this were to serve a single exchange
# with multiple pairs.

# Get asset information

    base=exchange.markets[pair]['base']
    quote=exchange.markets[pair]['quote']

    marketType="spot"
    if "type" in exchange.markets[pair]:
        if "type" in exchange.markets[pair]['info']:
            if exchange.markets[pair]['info']['type']==exchange.markets[pair]['type']:
                marketType=exchange.markets[pair]['type']
            else:
                marketType=exchange.markets[pair]['info']['type']

    JRRlog.WriteSpotLog(exchangeName,account,pair,"Base currency:  "+base)
    JRRlog.WriteSpotLog(exchangeName,account,pair,"Quote currency: "+quote)

    if "Steps" in Config:
        plevel=round((topValue-bottomValue)/Config['Steps'],8)
    elif "Pips" in Config:
        plevel=round(Config['Pips'],4)

    if plevel<=0.0001:
        plevel=0.0001

    JRRlog.WriteSpotLog(exchangeName,account,pair,f"Price step level: {plevel:.8f}")

    ticker=GetTicker(exchange,account,pair)

    Trade=ReadGrid(exchangeName,account,pair)
    if len(Trade['OrderList'])==0:
        # Set up sell orders
        c=1
        v=topValue-plevel
        while v>ticker['bid']:
            CurrentKey=((CurrentKey+1)%len(keys))
            Active=keys[CurrentKey]
            JRRapi.SetExchangeAPI(exchange,Active)

            co=[]
            order=MakeOrder(exchange,account,pair,'buy',psize,v)
            co.append(v)
            co.append(order)

            Trade['OrderList'].append(co)
            JRRlog.WriteSpotLog(exchangeName,account,pair,f"Placed order at: {c:.0f}/{v:.8f}")
            c+=1
            v-=plevel

        # Set up buy orders
        c=1
        v=bottomValue
        while v<ticker['bid']:
            CurrentKey=((CurrentKey+1)%len(keys))
            Active=keys[CurrentKey]
            JRRapi.SetExchangeAPI(exchange,Active)

            co=[]
            order=MakeOrder(exchange,account,pair,'buy',psize,v)
            co.append(v)
            co.append(order)

            Trade['OrderList'].append(co)
            JRRlog.WriteSpotLog(exchangeName,account,pair,f"Placed order at: {c:.0f}/{v:.8f}")
            c+=1
            v+=plevel

        WriteGrid(exchangeName,account,Trade,pair)

### Main Loop

    while True:
        CurrentKey=((CurrentKey+1)%len(keys))
        Active=keys[CurrentKey]
        JRRapi.SetExchangeAPI(exchange,Active)

        if Config['TakeProfit']>0:
            if Trade['Profit']>=Config['TakeProfit']:
                if 'ProfitSell' in Config:
                    res=JRRsupport.SendWebhook(Active,exchangeName,marketType,account,'Market',Config['ProfitSell'],'Sell',Trade['Profit'],0)
                    if res.find('Order Confirmation ID')>-1:
                        OrderID=EqSupport.GetOrderID(res)
                        JRRlog.WriteSpotLog(exchangeName,account,pair,f"{pair:10} XFER {Trade['Profit']:.8f} -> {Config['ProfitSell']}, {OrderID}")
                        Trade['Profit']=0.0
                        WriteGrid(exchangeName,account,Trade,pair)
                elif 'ProfitBuy' in Config:
                    res=JRRsupport.SendWebhook(Active,exchangeName,marketType,account,'Market',Config['ProfitBuy'],'Buy',Trade['Profit'],0)
                    if res.find('Order Confirmation ID')>-1:
                        OrderID=EqSupport.GetOrderID(res)
                        JRRlog.WriteSpotLog(exchangeName,account,pair,f"{pair:10} XFER {Trade['Profit']:.8f} -> {Config['ProfitBuy']}, {OrderID}")
                        Trade['Profit']=0.0
                        WriteGrid(exchangeName,account,Trade,pair)

        StartTime=datetime.now()
        for order in range(len(Trade['OrderList'])):
            co=GetOrder(exchange,account,pair,Trade['OrderList'][order][1]['id'])
            status=co['status'].lower()

            if status=='closed':
                side=co['side'].lower()
                if side=='buy':
                    JRRledger.WriteLedger(exchange, account, pair, 'Limit', 'buy', psize, Trade['OrderList'][order][0], Trade['OrderList'][order][1], RetryLimit, "Procurator")
                    ov=Trade['OrderList'][order][0]
                    sv=ov+plevel
                    Trade['OrderList'][order][0]=sv
                    Trade['OrderList'][order][1]=MakeOrder(exchange,account,pair,'sell',psize,sv)
                    JRRlog.WriteSpotLog(exchangeName,account,pair,f"Close Buy at {ov:.8f}, Open Sell at {sv:.8f}")
                    WriteGrid(exchangeName,account,Trade,pair)
                elif side=='sell':
                    JRRledger.WriteLedger(exchange, account, pair, 'Limit', 'sell', psize, Trade['OrderList'][order][0], Trade['OrderList'][order][1], RetryLimit, "Procurator")
                    Trade['Profit']+=round(plevel*psize,8)
                    ov=Trade['OrderList'][order][0]
                    bv=ov-plevel
                    Trade['OrderList'][order][0]=bv
                    Trade['OrderList'][order][1]=MakeOrder(exchange,account,pair,'buy',psize,bv)
                    JRRlog.WriteSpotLog(exchangeName,account,pair,f"Close Sell at {ov:.8f}, Open Buy at {bv:.8f}")
                    WriteGrid(exchangeName,account,Trade,pair)
            elif co['status'].lower()!='open':
                JRRlog.WriteSpotLog(exchangeName,account,pair,f"Order #{co['id']}, Unreconized status: {status}")

#        EndTime=datetime.now()
#        Elapsed=(EndTime-StartTime)
#        JRRlog.WriteSpotLog(exchangeName,account,pair,"Orderlist Sweep Completed: "+str(Elapsed)+" seconds")

        JRRsupport.ElasticSleep(1)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Terminated")

