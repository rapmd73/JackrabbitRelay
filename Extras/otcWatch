#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit OliverTwist Conditional watch
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

import sys
sys.path.append('/home/JackrabbitRelay2/Base/Library')
import os
import time
import json
import random
import multiprocessing
import subprocess

import JRRsupport
import JackrabbitRelay as JRR

DataDirectory='/home/JackrabbitRelay2/Data'
ConditionalStorehouse=DataDirectory+'/OliverTwist.Conditional.Storehouse'

OliverTwistLock=JRRsupport.Locker("OliverTwist")

# Calculate Price

def CalculatePriceExit(order,ts,dir,price):
    # Figure out TakeProfit or Stoploss
    if ts=='TakeProfit':
        if '%' in order[ts]:
            if dir=='long':
                val=price+((float(order[ts].replace('%','').strip())/100)*price)
            else:
                val=price-((float(order[ts].replace('%','').strip())/100)*price)
        # Pips
        elif 'p' in order[ts].lower():
            if dir=='long':
                val=price+(float(order[ts].lower().replace('p','').strip())*0.0001)
            else:
                val=price-(float(order[ts].lower().replace('p','').strip())*0.0001)
        else:
            val=float(order[ts])
    elif ts=='StopLoss':
        if '%' in order[ts]:
            if dir=='long':
                val=price-((float(order[ts].replace('%','').strip())/100)*price)
            else:
                val=price+((float(order[ts].replace('%','').strip())/100)*price)
        # Pips
        elif 'p' in order[ts].lower():
            if dir=='long':
                val=price-(float(order[ts].lower().replace('p','').strip())*0.0001)
            else:
                val=price+(float(order[ts].lower().replace('p','').strip())*0.0001)
        else:
            val=float(order[ts])

    return val

def main():
    if len(sys.argv)>2:
        exchange=sys.argv[1].lower()
        account=sys.argv[2]
    else:
        print("Exchange/Broker and account must be provided.")
        sys.exit(0)

    OliverTwistLock.Lock()
    if os.path.exists(ConditionalStorehouse):
        buffer=JRRsupport.ReadFile(ConditionalStorehouse)
    OliverTwistLock.Unlock()

    relay=None
    openTrades=None
    ticker=None
    if buffer!=None and buffer!='':
        Orphans=buffer.split('\n')
        for Entry in Orphans:
            if Entry.strip()=='':
                continue

            Data=json.loads(Entry)
            if Data['Framework']=='ccxt':
                Order=Data['Order']
            elif Data['Framework']=='oanda':
                Order=Data['Order']

            if Order['Exchange']!=exchange or Order['Account']!=account:
                continue

            price=0
            amount=0

            # Cache and remember these data points. Exchanges like phemex will draw the program into oblivion otherwise from
            # the rtelimits. This only works because we are filtering based upon exchange and account.

            if relay==None:
                relay=JRR.JackrabbitRelay(framework=Data['Framework'],payload=json.dumps(Order))
            if ticker==None:
                ticker=relay.GetTicker(symbol=relay.Order['Asset'])

            # Handle each framework type

            if Data['Framework']=='ccxt':
                Resp=Data['Response']
                Detail=Resp['Details']
                price=Detail['price']
                amount=Detail['amount']

                if Resp['side']=='buy':
                    dir='Long'
                    tprice=ticker['Bid']
                else:
                    dir='Short'
                    tprice=ticker['Ask']

                tp=round(CalculatePriceExit(Order,'TakeProfit',dir,price),8)
                sl=round(CalculatePriceExit(Order,'StopLoss',dir,price),8)
                print(f"{Order['Asset']:20} {sl:.8f} {tprice:.8f}({price:.8f}) {tp:.8f} {amount:.8f} {dir`}")
            elif Data['Framework']=='oanda':
                Resp=Data['Response']
                id=Data['ID']

                if openTrades==None:
                    openTrades=relay.GetOpenTrades(symbol=Order['Asset'])
                cid=relay.GetOrderDetails(OrderID=id)[-1]['id']

                for cur in openTrades:
                    if cur['id']==cid:
                        price=float(cur['price'])
                        amount=float(cur['currentUnits'])
                        break

                if amount>=0:
                    dir='Long'
                    tprice=ticker['Bid']
                else:
                    dir='Short'
                    tprice=ticker['Ask']

                tp=round(CalculatePriceExit(Order,'TakeProfit',dir,price),5)
                sl=round(CalculatePriceExit(Order,'StopLoss',dir,price),5)
                print(f"{Order['Asset']:10} {sl:.5f} {tprice:.5f}({price:.5f}) {tp:.5f} {abs(amount):9.5f} {dir}")
            else:
                print("Unrecognized framework:",Data['Framework'])
    else:
        print("No conditional orders yet.")
        sys.exit(0)

if __name__ == '__main__':
    main()
