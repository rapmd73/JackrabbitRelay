#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit OliverTwist Conditional watch
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

import sys
sys.path.append('/home/JackrabbitRelay2/Base/Library')
import os
import datetime
import time
import json
import random
import multiprocessing
import subprocess

import JRRsupport
import JackrabbitRelay as JRR

DataDirectory='/home/JackrabbitRelay2/Data'
ConditionalStorehouse=DataDirectory+'/OliverTwist.Conditional.Storehouse'

OliverTwistLock=JRRsupport.Locker("OliverTwist")

# Calculate Price

def CalculatePriceExit(order,ts,dir,price):
    # Figure out TakeProfit or Stoploss
    if ts=='TakeProfit':
        if '%' in order[ts]:
            if dir=='long':
                val=price+((float(order[ts].replace('%','').strip())/100)*price)
            else:
                val=price-((float(order[ts].replace('%','').strip())/100)*price)
        # Pips
        elif 'p' in order[ts].lower():
            if dir=='long':
                val=price+(float(order[ts].lower().replace('p','').strip())*0.0001)
            else:
                val=price-(float(order[ts].lower().replace('p','').strip())*0.0001)
        else:
            val=float(order[ts])
    elif ts=='StopLoss':
        if 'StopLoss' in order:
            if '%' in order[ts]:
                if dir=='long':
                    val=price-((float(order[ts].replace('%','').strip())/100)*price)
                else:
                    val=price+((float(order[ts].replace('%','').strip())/100)*price)
            # Pips
            elif 'p' in order[ts].lower():
                if dir=='long':
                    val=price-(float(order[ts].lower().replace('p','').strip())*0.0001)
                else:
                    val=price+(float(order[ts].lower().replace('p','').strip())*0.0001)
            else:
                val=float(order[ts])
        else:
            val=0

    return val

def main():
    if len(sys.argv)>2:
        exchange=sys.argv[1].lower()
        account=sys.argv[2]
    else:
        print("Exchange/Broker and account must be provided.")
        sys.exit(0)

    srch=None
    if len(sys.argv)>3:
        srch=sys.argv[3]

    OliverTwistLock.Lock()
    if os.path.exists(ConditionalStorehouse):
        buffer=JRRsupport.ReadFile(ConditionalStorehouse).strip()
    OliverTwistLock.Unlock()

    Relay={}
    TickerData={}
    openTrades={}

    relay=None
    ticker=None
    if buffer!=None and buffer!='':
        Orphans=buffer.split('\n')
        for Entry in Orphans:
            if Entry.strip()=='':
                continue

            Data=json.loads(Entry)
            if Data['Framework']=='ccxt':
                Order=Data['Order']
            elif Data['Framework']=='oanda':
                Order=Data['Order']
            else:
                print("Framework not supported (yet)...")
                sys.exit(1)

            if Order['Exchange']!=exchange or Order['Account']!=account:
                continue

            if srch!=None and Order['Asset']!=srch:
                continue

            price=0
            amount=0

            # Cache and remember these data points. Exchanges like phemex will draw the program into oblivion otherwise from
            # the rtelimits. This only works because we are filtering based upon exchange and account.

            if Data['Framework'] not in Relay:
                Relay[Data['Framework']]=JRR.JackrabbitRelay(framework=Data['Framework'],payload=json.dumps(Order),NoIdentityVerification=True)
            else:
                Relay[Data['Framework']].ProcessPayload(NewPayload=json.dumps(Order))

            if Order['Asset'] not in TickerData:
                TickerData[Order['Asset']]=Relay[Data['Framework']].GetTicker(symbol=Relay[Data['Framework']].Order['Asset'])

            ticker=TickerData[Order['Asset']]

            # Handle each framework type

            if Data['Framework']=='ccxt':
                id=Data['ID']
                if type(Data['Response'])==str:
                    Resp=json.loads(Data['Response'])
                else:
                    Resp=Data['Response']
                Detail=Resp['Details']
                price=Detail['price']
                amount=Detail['amount']

                if Resp['side']=='buy':
                    dir='long'
                    tprice=ticker['Bid']
                else:
                    dir='short'
                    tprice=ticker['Ask']

                tp=round(CalculatePriceExit(Order,'TakeProfit',dir,price),8)
                sl=round(CalculatePriceExit(Order,'StopLoss',dir,price),8)
                print(f"{id} {Order['Asset']:14} {sl:.8f} {tprice:.8f}({price:.8f}) {tp:.8f} {amount:.8f} {dir}")
            elif Data['Framework']=='oanda':
                Resp=Data['Response']
                id=Data['ID']

                if Order['Asset'] not in openTrades:
                    openTrades[Order['Asset']]=Relay[Data['Framework']].GetOpenTrades(symbol=Order['Asset'])
                detail=Relay[Data['Framework']].GetOrderDetails(OrderID=id)
                if detail==None:
                    continue
                cid=detail[-1]['id']

                # find trading duration
                parts=detail[0]['time'].split('.')
                dsS=f"{parts[0]}.{parts[1][:6]}Z"
                ds=datetime.datetime.strptime(dsS,'%Y-%m-%dT%H:%M:%S.%fZ')
                deS=datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S.%f')
                de=datetime.datetime.strptime(deS,'%Y-%m-%d %H:%M:%S.%f')
                duration=de-ds

                found=False
                for cur in openTrades[Order['Asset']]:
                    if cur['id']==cid:
                        found=True
                        price=float(cur['price'])
                        amount=float(cur['currentUnits'])
                        rpl=float(cur['unrealizedPL'])
                        break

                if not found:
                    continue

                if amount>=0:
                    dir='long'
                    tprice=ticker['Bid']
                else:
                    dir='short'
                    tprice=ticker['Ask']

                tp=round(CalculatePriceExit(Order,'TakeProfit',dir,price),5)
                sl=round(CalculatePriceExit(Order,'StopLoss',dir,price),5)
                tpPips=f"({Order['TakeProfit']})"
                slPips=""
                if sl!=0:
                    slPips=f"({Order['StopLoss']})"
                print(f"{id:10} {Order['Asset']:10} {sl:.5f} {slPips:<10} {tprice:.5f}({price:.5f})/{ticker['Spread']:.5f} {tp:.5f} {tpPips:<10} {rpl:.5f} {abs(amount):9.5f} {dir}, {duration}")
    else:
        print("No conditional orders yet.")
        sys.exit(0)

if __name__ == '__main__':
    main()
