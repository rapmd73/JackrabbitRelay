#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit BlackCrowHunter
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

import sys
sys.path.append('/home/JackrabbitRelay/Base/Library')
import os
import time
import datetime
import requests
import json

import JRRconfig
import JRRlog
import JRRapi
import JRRsupport

import TechnicalAnalysis as ta

blank=" "

# Black Crow Algorithm
#
# Count the number of downward candles, must match candle count from command line
# Last candle MUST be upward

def IsBlackCrow(candles,idx,CandleCount):
#    i=len(candles)-1
    # Find 3 down candles in a row followed by 1 up candle

    IsDown=False
    IsBuy=False

    offset=1
    for z in range(offset,CandleCount+offset):
        x=idx-z
        red=ta.IsRedCandle(candles[x-2],candles[x-1])
        if z==offset:
            IsDown=red
        else:
            IsDown=IsDown and red

    # Last candle shows up swing, if so, BUY
    IsUp=ta.IsGreenCandle(candles[i-1],candles[i])

    if IsDown and IsUp:
        return True
    return False



if len(sys.argv) > 8:
    tf=sys.argv[1].lower()
    exchangeName=sys.argv[2].lower()
    account=sys.argv[3]
    pair=sys.argv[4].upper()
    CandleCount=int(sys.argv[5])
    pct=float(sys.argv[6])/100
    start_time_datetime = sys.argv[7]
    end_time_datetime = sys.argv[8]
else:
    print("A timeframe, an exchange, a (sub)account, an asset a candle count, pct gain, start time stamp, and end time stamp must be provided, example:")
    print("Backtest 1m exchange test_subaccount btc/usd 5 '2021-12-01 00:00:00' '2021-12-31 23:59:59'")
    sys.exit(1)

keys=JRRsupport.ReadConfig(exchangeName,account)

CurrentKey=(os.getpid()%len(keys))
Active=keys[CurrentKey]

exchange=JRRapi.ExchangeLogin(exchangeName,Active,Notify=False)

if "Retry" in Active:
    RetryLimit=int(Active['Retry'])
else:
    RetryLimit=10

markets=JRRapi.GetMarkets(exchange,pair,RetryLimit,Notify=False)
#candles=JRRapi.FetchCandles(exchange,pair,tf,0,RetryLimit)
#def FetchCandles_timestamp(exchange,pair,tf,start_date_time,end_date_time,RetryLimit):
candles = JRRapi.FetchCandles_interval(exchange,pair,tf,start_time_datetime,end_time_datetime,RetryLimit)

p=0.0
oldp=0.0
w=0
l=0
Average=0.0
SumCount=0
Total=0.0
offset=1
tp=0.0
bl=0.0

IsBuy=False
IsCandlePattern=False
total_income = 0
max_spent = 0 
for i in range(CandleCount+1,len(candles)):
    t=candles[i][0]/1000

    timestamp=datetime.datetime.fromtimestamp(t)
    dt=timestamp.strftime('%Y-%m-%d %H:%M')

    IsCandlePattern=IsBlackCrow(candles,i,CandleCount)
    close=candles[i][4]

    if SumCount>0.0 and close>tp:
        result=close-Average
        print(f"{dt:12} Sell {close:16.8f} {result:16.8f} {Total:16.8f}")
        if Total > max_spent:
            max_spent = Total
        SumCount=0
        Total=0.0
        Average=0.0
        total_income += result

    if IsCandlePattern and SumCount>0.0 and close<bl:
        SumCount+=1
        Total+=close
        Average=Total/SumCount
        tp=Average+(Average*pct)
        print(f"{dt:12} Buy  {close:16.8f} {bl:16.8f} {Average:16.8f} {tp:16.8f}")

    if IsCandlePattern and SumCount==0:
        SumCount=1
        Total=close
        Average=Total/SumCount
        tp=Average+(Average*pct)
        bl=Average-(Average*pct)
        print(f"{dt:12} Buy  {close:16.8f} {blank:16} {blank:16} {tp:16.8f}")

print("Total Income for period =",total_income," Max Spent: ",max_spent)