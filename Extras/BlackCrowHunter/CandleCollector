#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit BlackCrowHunter
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

import sys
sys.path.append('/home/JackrabbitRelay/Base/Library')
import os
import time
import datetime
import requests
import json
import pathlib

import JRRconfig
import JRRlog
import JRRapi
import JRRsupport

def ReadConfig(fn):
    Required=[ "Timeframe", "TotalDays", "Exchange", "Account", "Asset" ]

    Config={}

    if os.path.exists(fn):
        try:
            raw=pathlib.Path(fn).read_text()
        except:
            print(f"Can't read {fn}")
            sys.exit(1)

        txt=JRRsupport.pFilter(raw)

        try:
            Config=json.loads(txt)
        except:
            print(f"Damaged JSON: {txt}")
            sys.exit(1)
    else:
        print('Config file not found.')
        sys.exit(1)

    for i in Required:
        if i not in Config:
            print(f"Missing required item: {i}")
            sys.exit(1)

    Config['Exchange']=Config['Exchange'].lower()
    Config['Asset']=Config['Asset'].upper()
    Config['TotalDays']=int(Config['TotalDays'])

    return(Config)

###
### Main code base. Place order on exchange
###

def main():
    Config=ReadConfig(sys.argv[1])

    keys=JRRsupport.ReadConfig(Config['Exchange'],Config['Account'])

    CurrentKey=(os.getpid()%len(keys))
    Active=keys[CurrentKey]

    exchange=JRRapi.ExchangeLogin(Config['Exchange'],Active,Notify=False)

    if "Retry" in Active:
        RetryLimit=int(Active['Retry'])
    else:
        RetryLimit=10

    # Get and write OHLCV to file

    candles=[]
    done=False
    ct=exchange.parse8601(Config['DateTime'])
    now=exchange.milliseconds()

    fn=Config['Exchange']+'.'+Config['Account']+'.'+Config['Asset'].replace("-","").replace("/","").replace(':','')+'.'+Config['Timeframe']+'.history'
    fh=open(fn,'w')

    while ct<now:
        try:
            retry=0
            data = exchange.fetch_ohlcv(Config['Asset'], Config['Timeframe'], ct)
            l=len(data)
            print(exchange.iso8601(ct),l,ct)
            if l>0:
                ct=data[l-1][0]+1

                for idx in data:
                    s=f'{idx[0]} {idx[1]} {idx[2]} {idx[3]} {idx[4]} {idx[5]}\n'
                    fh.write(s)
            else:
                print('Fetch Candle, End of data')
                fh.close()
                sys.exit(1)
        except Exception as e:
            if retry>=RetryLimit:
                print('Fetch Candle, '+JRRapi.StopHTMLtags(str(e)))
                fh.close()
                sys.exit(1)
            else:
                JRRsupport.ElasticSleep(5)
            retry+=1
    fh.close()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Terminated")

