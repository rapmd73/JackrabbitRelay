#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit BlackCrowHunter
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

import sys
sys.path.append('/home/JackrabbitRelay/Base/Library')
import os
import time
import datetime
import requests
import json
import pathlib

import JRRconfig
import JRRlog
import JRRapi
import JRRsupport

blank=" "

msec = 1000
minute = 60 * msec
hour = 60 * minute
day = 24 * hour
hold = 10

def FetchNumberCandles(exchange,pair,tf,days):
    ct = exchange.milliseconds()-day
    bt = (days*1440)

    print('Pulling historic data...')
    candles = []
    done=False
    cc=0
    while not done and cc<bt:
        try:
            data = exchange.fetch_ohlcv(pair, tf, ct)
            l=len(data)
            if l>0:
                cc+=l
                candles+=data
#                for i in data:
#                    if i not in candles:
#                        candles.append(i)
                first = data[0][0]
                ct-=(minute*l)
                print(exchange.iso8601(ct),l,cc)
            else:
                done=True
        except Exception as e:
            print('Got an error', type(e).__name__, e.args, ', retrying in', hold, 'seconds...')
            time.sleep(hold)

    print('Removing overlaps...')
    candleset=set(map(tuple,candles))
    candles=list(candleset)
    print('Sorting...')
    candles.sort()

    return candles

def ReadConfig(fn):
    Required=[ "Timeframe", "TotalDays", "Exchange", "Account", "Asset" ]

    Config={}

    if os.path.exists(fn):
        try:
            raw=pathlib.Path(fn).read_text()
        except:
            print(f"Can't read {fn}")
            sys.exit(1)

        txt=JRRsupport.pFilter(raw)

        try:
            Config=json.loads(txt)
        except:
            print(f"Damaged JSON: {txt}")
            sys.exit(1)
    else:
        print('Config file not found.')
        sys.exit(1)

    for i in Required:
        if i not in Config:
            print(f"Missing required item: {i}")
            sys.exit(1)

    Config['Exchange']=Config['Exchange'].lower()
    Config['Asset']=Config['Asset'].upper()
    Config['TotalDays']=int(Config['TotalDays'])

    return(Config)

###
### Main code base. Place order on exchange
###

def main():
    Config=ReadConfig(sys.argv[1])

    keys=JRRsupport.ReadConfig(Config['Exchange'],Config['Account'])

    CurrentKey=(os.getpid()%len(keys))
    Active=keys[CurrentKey]

    exchange=JRRapi.ExchangeLogin(Config['Exchange'],Active,Notify=False)

    if "Retry" in Active:
        RetryLimit=int(Active['Retry'])
    else:
        RetryLimit=10

    candles=FetchNumberCandles(exchange,Config['Asset'],Config['Timeframe'],Config['TotalDays'])

    # Write OHLCV to file

    print('Writing historic data...')
    fn=Config['Exchange']+'.'+Config['Account']+'.'+Config['Asset'].replace("-","").replace("/","").replace(':','')+'.'+Config['Timeframe']+'.history'
    fh=open(fn,'w')
    for idx in candles:
        t=idx[0]
        o=idx[1]
        h=idx[2]
        l=idx[3]
        c=idx[4]
        v=idx[5]
        s=f'{t} {o} {h} {l} {c} {v}\n'
        fh.write(s)

    fh.close()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Terminated")

