#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit BlackCrowHunter
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

import sys
sys.path.append('/home/JackrabbitRelay/Base/Library')
import os
import time
import datetime
import requests
import json

import JRRconfig
import JRRlog
import JRRapi
import JRRsupport

blank=" "

msec = 1000
minute = 60 * msec
hour = 60 * minute
day = 24 * hour
hold = 10

def FetchNumberCandles(exchange,pair,tf,days):
    ct = exchange.milliseconds()-day
    bt = (days*1440)

    print('Pulling historic data...')
    candles = []
    done=False
    cc=0
    while not done and cc<bt:
        try:
            data = exchange.fetch_ohlcv(pair, tf, ct)
            l=len(data)
            if l>0:
                cc+=l
                for i in data:
                    if i not in candles:
                        candles.append(i)
                first = data[0][0]
                ct-=(minute*l)
                print(exchange.iso8601(ct),l,cc)
            else:
                done=True
        except Exception as e:
            print('Got an error', type(e).__name__, e.args, ', retrying in', hold, 'seconds...')
            time.sleep(hold)

    print('Sorting...')
    candles.sort()

    return candles

if len(sys.argv) > 5:
    tf=sys.argv[1].lower()
    exchangeName=sys.argv[2].lower()
    account=sys.argv[3]
    pair=sys.argv[4].upper()
    TotalDays=int(sys.argv[5])
else:
    print("A timeframe, an exchange, a (sub)account, an asset, and total days must be provided.")
    sys.exit(1)

keys=JRRsupport.ReadConfig(exchangeName,account)

CurrentKey=(os.getpid()%len(keys))
Active=keys[CurrentKey]

exchange=JRRapi.ExchangeLogin(exchangeName,Active,Notify=False)

if "Retry" in Active:
    RetryLimit=int(Active['Retry'])
else:
    RetryLimit=10

candles=FetchNumberCandles(exchange,pair,tf,TotalDays)

# Write OHLCV to file

print('Writing historic data...')
fn=exchangeName+'.'+account+'.'+pair.replace("-","").replace("/","").replace(':','')+'.'+tf+'.history'
fh=open(fn,'w')
for idx in candles:
    t=idx[0]
    o=idx[1]
    h=idx[2]
    l=idx[3]
    c=idx[4]
    v=idx[5]
    s=f'{t} {o} {h} {l} {c} {v}\n'
    fh.write(s)

fh.close()
