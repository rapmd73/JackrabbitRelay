#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit Relay
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

import sys
sys.path.append('/home/JackrabbitRelay2/Base/Library')
import os
import time
import json

import JRRsupport

MimicData='/home/JackrabbitRelay2/Data/Mimic/'

###
### Main code base.
###

if len(sys.argv)<2:
    print("A Mimic account is required.")
    sys.exit(1)

account=sys.argv[1]
acn=f'{MimicData}{account}.history'
if not os.path.exists(acn):
    print('Please verify wallet name and case')
    sys.exit(1)

lines=JRRsupport.ReadFile(acn).strip().split('\n')

fees={}
Wallet={}

for line in lines:
    if line=='':
        continue

    try:
        data=json.loads(line)
    except:
        print("Line damaged:")
        print(f"  {line}")
        sys.exit(1)

    asset=data['Asset']
    f=float(data['Fee'])

    if data['Asset'] not in Wallet:
        Wallet[data['Asset']]=[]
    if data['Asset'] not in fees:
        fees[data['Asset']]=0

    fees[data['Asset']]+=f

    Wallet[data['Asset']].append(line)

maxbuys=0
maxsells=0
maxfees=0
maxbal=0
maxpmax=0

for pair in sorted(Wallet.keys()):
    if len(sys.argv)>2 and sys.argv[2]!=pair:
        continue

    # This will become the initial balance of the wallet.
    balance=0
    buys=0
    sells=0
    maxpos=0
    curpos=0

    # Scan thie current pair
    for line in Wallet[pair]:
        try:
            data=json.loads(line)
        except:
            print("Line damaged:")
            print(f"  {line}")
            sys.exit(1)

        asset=data['Asset']
        base,quote=asset.split('/')
        if ':' in asset:
            quote=asset.split(':')[1]
            if '-' in quote:
                quote=quote.split('-')[0]

        dt=data['DateTime']
        act=data['Action'].upper()[0]
        bw=float(data[base])            # base wallet
        qw=float(data[quote])           # quote wallet
        a=float(data['Amount'])
        p=float(data['Price'])
        f=float(data['Fee'])

#        if balance==0:
#            balance=qw+f+(abs(bw)*p)

#        pnl=(qw+(abs(bw)*p))-f-balance
        if act=='B':
            balance-=(abs(a)*p)+f
            buys+=1
            curpos+=1
        else:
            balance+=(abs(a)*p)-f
            sells+=1
            curpos-=1
            if curpos<0:
                curpos=0

        if curpos>maxpos:
            maxpos=curpos

#        str=f"  {dt} {act} {bw:14.8f} {qw:14.8f} {a:14.8f} {p:.8f} {f:.8f} {balance:.8f}"
#        print(str)

    maxbal+=balance
    maxbuys+=buys
    maxsells+=sells
    maxfees+=fees[pair]
    maxpmax+=maxpos

    print(f"{pair:<16} {buys:5.0f} {sells:5.0f} {buys-sells:8.0f} {maxpos:4.0f} {fees[pair]:16.8f} {balance:20.8f}")

print(f"{" ":16} {maxbuys:5.0f} {maxsells:5.0f} {maxbuys-maxsells:8.0f} {maxpmax:4.0f} {maxfees:16.8f} {maxbal:20.8f}")
