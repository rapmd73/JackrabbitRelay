#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit Relay
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

# matplotlib function by alCa.

import sys
sys.path.append('/home/JackrabbitRelay2/Base/Library')
import os
import time
import json
import pandas as pd
import matplotlib.pyplot as plt

import JRRsupport

chartDir='/home/JackrabbitRelay2/Data/Charts/'
MimicData='/home/JackrabbitRelay2/Data/Mimic/'

def plot_trading_data(trading_data,account,base,quot):
    # Convert JSON strings to a list of dictionaries
    # data = [json.loads(line) for line in trading_data.split('\n') if line]
    data=trading_data

    # Convert to DataFrame
    df = pd.DataFrame(data)
    
    # Convert 'DateTime' to datetime object
    df['DateTime'] = pd.to_datetime(df['DateTime'])
    
    # Plot PEPE balance over time
    plt.figure(figsize=(15, 8))
    
    plt.subplot(3, 2, 1)
    plt.plot(df['DateTime'], df[base], marker='o')
    plt.title(f'{base} Balance Over Time')
    plt.xlabel('DateTime')
    plt.ylabel(base)
    
    # Plot USDT balance over time
    plt.subplot(3, 2, 2)
    plt.plot(df['DateTime'], df[quote], marker='o', color='orange')
    plt.title(f'{quote} Balance Over Time')
    plt.xlabel('DateTime')
    plt.ylabel(quote)
    
    # Plot transaction amounts over time
    plt.subplot(3, 2, 3)
    plt.plot(df['DateTime'], df['Amount'], marker='o', color='green')
    plt.title('Transaction Amount Over Time')
    plt.xlabel('DateTime')
    plt.ylabel('Amount')
    
    # Plot transaction prices over time
    plt.subplot(3, 2, 4)
    plt.plot(df['DateTime'], df['Price'], marker='o', color='red')
    plt.title('Transaction Price Over Time')
    plt.xlabel('DateTime')
    plt.ylabel('Price')
    
    # Plot fees over time
    plt.subplot(3, 2, 5)
    plt.plot(df['DateTime'], df['Fee'], marker='o', color='purple')
    plt.title('Transaction Fee Over Time')
    plt.xlabel('DateTime')
    plt.ylabel('Fee')
    
    # Plot action distribution
    plt.subplot(3, 2, 6)
    df['Action'].value_counts().plot(kind='bar', color=['blue', 'red'])
    plt.title('Action Distribution')
    plt.xlabel('Action')
    plt.ylabel('Count')
    
    plt.tight_layout()
#    plt.show()
    plt.savefig(f'{chartDir}aLcaChart.mimic.{account}.{base}{quote}.png')
    plt.close()

# Sample data input
#trading_data = """
#{"DateTime": "2024-05-26 19:42:27.144159", "ID": "17167453471441732", "Action": "buy", "Asset": "PEPE/USDT", "PEPE": 2451113.05611632, "USDT": 94817.5613180798, "Amount": 2450818.31777792, "Price": 1.593e-05, "Fee": 0.09760384}
#{"DateTime": "2024-05-26 19:42:29.191986", "ID": "17167453491920022", "Action": "sell", "Asset": "PEPE/USDT", "PEPE": 2591.021503230091, "USDT": 94856.4687616998, "Amount": 2448522.03461309, "Price": 1.593e-05, "Fee": 0.09751239}
#"""
#plot_trading_data(trading_data)

###
### Main code base.
###

if len(sys.argv)<2:
    print("A Mimic account is required.")
    sys.exit(1)

account=sys.argv[1]
acn=f'{MimicData}{account}.history'
if not os.path.exists(acn):
    print('Please verify wallet name and case')
    sys.exit(1)

TradeData=JRRsupport.ReadFile(acn)
lines=TradeData.strip().split('\n')

Wallet={}

for line in lines:
    if line=='':
        continue

    try:
        data=json.loads(line)
    except:
        print("Line damaged:")
        print(f"  {line}")
        sys.exit(1)

    if data['Asset'] not in Wallet:
        Wallet[data['Asset']]=[]

    Wallet[data['Asset']].append(data)

for asset in sorted(Wallet.keys()):
    base,quote=asset.split('/')
    if ':' in asset:
        quote=asset.split(':')[1]
        if '-' in quote:
            quote=quote.split('-')[0]
    plot_trading_data(Wallet[asset],account,base,quote)

