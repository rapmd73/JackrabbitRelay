#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit Relay - OANDA GridBot
# 2021 Copyright Â© Robert APM Darin
# All rights reserved unconditionally.

# This program calculate the starting and ending units based up the levels and steps. It produces a report identical to the
# spreadsheet I featured several times.

import sys
sys.path.append('/home/JackrabbitRelay2/Base/Library')
import os
import datetime
from dateutil.relativedelta import relativedelta

import JackrabbitRelay as JRR

###
### Main code base.
###

relay=JRR.JackrabbitRelay()
if relay.GetArgsLen() > 3:
    exchangeName=relay.GetExchange()
    account=relay.GetAccount()
    asset=relay.GetAsset()
else:
    print("An exchange, an account, and an asset must be provided.")
    sys.exit(1)

if relay.GetFramework()=='ccxt':
    percision=8
elif relay.GetFramework()=='oanda':
    # Percision
    percision=abs(int(relay.Markets[asset]['pipLocation']))
else:
    print("Unrecoginized framework: {relay.GetFramework()}")
    sys.exit(1)

# Figure out worst case price based upon 5000 candles on the monthly time frame.

wcp=0
mh=0
ml=9999999
mms=0
maxMonth=[]
spList=[]
avgList=[]

ohlcv=relay.GetOHLCV(symbol=asset,timeframe=relay.Timeframes[-1],limit=5000)

for slice in ohlcv:
    cs=0
    for i in range(1,4):
        wcp=max(slice[i],wcp)
        mh=max(slice[i],mh)
        ml=min(slice[i],ml)
        avgList.append(slice[i])

    ms=slice[2]-slice[3] # monthly spread
    spList.append(ms)
    if ms>mms:           # monthly max spread, the largest month encountered
        mms=ms
        maxMonth=slice

sp=mh-ml

print(f"Highest timeframe for {asset} is {relay.Timeframes[-1]}")

# find trading duration
dsS=datetime.datetime.fromtimestamp(ohlcv[0][0]/1000).strftime('%Y-%m-%d %H:%M:%S')
ds=datetime.datetime.strptime(dsS,'%Y-%m-%d %H:%M:%S')
deS=datetime.datetime.fromtimestamp(ohlcv[-1][0]/1000).strftime('%Y-%m-%d %H:%M:%S')
de=datetime.datetime.strptime(deS,'%Y-%m-%d %H:%M:%S')

delta=relativedelta(de,ds)
y=delta.years
m=delta.months
d=delta.days
print(f"Timeframe duration: {y} years, {m} months, {d} days")

print()

print(f"Maximum market high:    {round(mh,percision):.{percision}f}")
print(f"Minimum market low:     {round(ml,percision):.{percision}f}")
print(f"Highest market spread:  {round(sp,percision):.{percision}f}")

print()

mavg=sum(avgList)/len(avgList)

print(f"Market median:          {round((mh+ml)/2,percision):.{percision}f}")
print(f"Market average:         {round(mavg,percision):.{percision}f}")

print()

mmm=maxMonth[2]-maxMonth[3]     # Maximum monthly movement
amm=sum(spList)/len(spList)     # Average monthly movement

print(f"Maximum {relay.Timeframes[-1]} movement: {round(mmm,percision):.{percision}f} ({(mmm/mh)*100:.2f}%)")
print(f"Average {relay.Timeframes[-1]} movement: {round(amm,percision):.{percision}f} ({(amm/mh)*100:.2f}%)")

print()

maa=0                           # Months where spread was above average
for slice in spList:
    if slice>amm:
        maa+=1

lsp=len(spList)
print(f"Total {relay.Timeframes[-1]}s analyzed: {lsp}")
print(f"{relay.Timeframes[-1]}s above average:  {maa} ({(maa/lsp)*100:.2f}%)")

